#ifndef FISH
#define FISH

#include "_utils.fos"
#include "fish_h.fos"
#include "_ltp.fos"
#include "critter_skills_h.fos"
#include "speed_h.fos"

import uint8 checkSand( Map& map, uint16 tx, uint16 ty ) from "qmap_sand";
import uint8 checkWaterAround( Map& map, uint16 tx, uint16 ty, uint8 coast_flags, uint8 radius, bool smartRadius ) from "qmap_water";
import uint8 checkCoast( Map& map, uint16 tx, uint16 ty ) from "qmap_coast";
import uint8 checkWater( Map& map, uint16 tx, uint16 ty ) from "qmap_water";

uint fishingSkill( Critter& cr )
{
	return cr.Skill[ SK_FISHING ] + uint( cr.Skill[ SK_OUTDOORSMAN ] * 0.5 );
}

bool PrepareFishingRod( Critter& cr, Item& item )
{
	uint16 pid = item.GetProtoId();
	if( pid == PID_STRING )
	{
		if( hasItem( cr, PID_ROD, SLOT_HAND1 ) )
		{
			SingleItemProtoChange( cr, PID_ROD_STRING, SLOT_HAND1 );
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_ADD_LINE );
			_SubItem( item, 1 );
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_ROD );
		}
		
	}
	else if( pid == PID_HOOK )
	{
		if( hasItem( cr, PID_ROD_STRING, SLOT_HAND1 ) )
		{
			SingleItemProtoChange( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 );
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_ADD_HOOK );
			_SubItem( item, 1 );
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_ROD_LINE );
		}
	}
	else if( Bait.find( pid ) != -1 )
	{
		if( hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) )
		{
			Item@ rod = cr.GetItem( 0, SLOT_HAND1 );
			int index = Bait.find( pid );
			rod.Val0 = pid;
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_ADD_BAIT, "$bait@msg item " + ( pid * 100 ) + "@" );
			_SubItem( item, 1 );
		}
		
		if( hasItem( cr, PID_ROD_STRING, SLOT_HAND1 ) || hasItem( cr, PID_ROD, SLOT_HAND1 ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_ROD_LINE_HOOK );
		} 
	}
	return true;
}

class Fish
{
	uint16 pid;
	uint8 size;
	uint8 max_depth;
	uint stamina;
	uint16[] bait;
	
	Fish( uint16 pid, uint8 size, uint8 max_depth, uint stamina )
	{
        this.pid = pid;
        this.size = size;
        this.max_depth = max_depth;
        this.stamina = stamina;
	}
	
	bool likes( uint16 lure )
	{
		return this.bait.find( lure ) != -1;
	}
}

class FishCollection
{
	Fish@[] fishes;
	FishCollection() 
	{
	}
  
	FishCollection@ fish( uint16 pid, uint8 size, uint8 max_depth, uint stamina ) 
	{
		this.fishes.insertLast( Fish( pid, size, max_depth, stamina ) );
		return this;
	}
  
	FishCollection@ bait( uint16 bait ) 
	{
		this.fishes[ this.fishes.length() - 1 ].bait.insertLast( bait );
		return this;
	}
	
	FishCollection@ get_by_depth( uint8 depth ) 
	{
		FishCollection result;
		for( uint i=0, len = this.fishes.length(); i<len; i++ )
		{
			if(this.fishes[i].max_depth <= depth )
			{
				result.fishes.insertLast( this.fishes[i] );
			}
		}
		return result;
	}
		
	FishCollection@ get_by_bait( uint16 lure ) 
	{
		FishCollection result;
		for( uint i=0, len = this.fishes.length(); i<len; i++ )
		{
			if( this.fishes[i].likes(lure) )
			{
				result.fishes.insertLast( this.fishes[i] );
			}
		}
		return result;
	}
	
	Fish@ get_random()
	{
		uint len = this.fishes.length();
		if( len > 0 )
		{
			return this.fishes[ Random( 0, len-1 ) ];
		}
		else
		{
			return null; 
		}
	}
}

FishCollection@ fishes = FishCollection()
//             	 Pid,         size, max_depth, stamina, 						 preffered bait
	.fish( PID_FISH_SMALLEST,   1,		1,		150 ).bait( PID_MAGGOT ).bait( PID_ROACH ).bait( PID_MANTIS_MEAT ).bait( PID_MUTMUSH )
	.fish( PID_FISH_SMALL,      2,		2,		300 ).bait( PID_MAGGOT ).bait( PID_ROACH ).bait( PID_MANTIS_MEAT ).bait( PID_MUTMUSH )
	.fish( PID_FISH,			3,		3,		450 ).bait( PID_MANTIS_MEAT ).bait( PID_MUTMUSH ).bait( PID_RAD_MEAT ).bait( PID_PLAYERS_EAR ).bait( PID_THORAX ).bait( PID_FISH_SMALLEST )
	.fish( PID_FISH_BIG,      	4,		4,		600 ).bait( PID_RAD_MEAT ).bait( PID_PLAYERS_EAR ).bait( PID_THORAX ).bait( PID_FISH_SMALLEST ).bait( PID_RAT_MEAT ).bait( PID_MEAT )
	.fish( PID_FISH_BIGGEST,	5,		4,	    750 ).bait( PID_THORAX ).bait( PID_FISH_SMALLEST ).bait( PID_RAT_MEAT ).bait( PID_MEAT );

Fish@ getFish( Item@ floater ) 
{
	uint depth = floater.DEPTH;
	uint16 baitPid = floater.HAS_BAIT;
	return fishes.get_by_depth( depth ).get_by_bait( baitPid ).get_random();
}

bool PrepareFishing( Critter& cr, Item& fishingRod, int hexX, int hexY )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}

	if( Invalid_maps.find( map.GetProtoId() ) != -1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_FISH_HERE );
		return false;
	}

	if( !valid( fishingRod ) )
	{
		return false;
	}
	
	if( !hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_ARMED_ROD );
		return false;
	}
	
	if( fishingRod.HAS_BAIT <= 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_BAIT );
		return false;
	}

	if( GetDistantion( cr.HexX, cr.HexY, hexX, hexY ) > uint( CLAMP( 2 + ( fishingSkill(cr) / 50 ), 2, 8 ) ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WATER_TOO_FAR );
		return false;
	}

	check_tiles( cr, fishingRod, hexX, hexY ); 
	return true;
}

void check_tiles( Critter& cr, Item& fishingRod, int hexX, int hexY ) 
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	uint8 water_flags = 0; 	

	water_flags = checkWater( map, H2T( hexX ), H2T( hexY ) );
	
	if( water_flags == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WATER_TOO_SHALLOW );
		return;
	}
	
	Item@[] floaters;
	map.GetItems( PID_FLOATER, floaters );
	if( floaters.length() > 0 )
	{
		for( uint i = 0; i < floaters.length(); i ++ )
		{
			Item@ floatCheck = floaters[i];
			if( floatCheck.FISHERMAN_ID == int( cr.Id ) )
			{
				cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
				DeleteItem( floatCheck );
				cr.ParamBase[ ST_LTP_TIME ] = -1;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_TAKE_ROD_OUT );
				return;
			}
		}
	}
	
	Item@ floater = map.AddItem( hexX, hexY, PID_FLOATER, 1 );
	floater.FISHERMAN_ID = cr.Id;
	floater.HAS_BAIT = fishingRod.HAS_BAIT;
	floater.DEPTH = CheckDepth( map, floater );
	
	uint[] values = { floater.Id, cr.Id };
	floater.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 3 ) ), "e_floaterCheck", values, true );

	start_fishing( cr, fishingRod, floater, map );
}

bool ltp_inited = false;
void ltp_init()
{
    LTPREG( LTP_FISHING, process_fishing )
    ltp_inited = true;
}

bool start_fishing( Critter& cr, Item& fishingRod, Item& floater, Map& map )
{
    if( !ltp_inited )
	{
        ltp_init();
	}
   	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_CAST_ROD );
	PlayGenericSound( map, cr.HexX, cr.HexY, "rod_throw.ogg", 8 );
	
	StartProcess( cr, LTP_FISHING, 0, floater.Id, fishingRod.Id, 1000 );
	cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_UNARMED );
	return true;
}

uint process_fishing( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_FISHING )
    
	if( !valid( cr ) )
	{
		return 0;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return 0;
	}
		
	Item@ floater = GetItem( param1 );
	if( !valid( floater ) )
	{
		return 0;
	}
	
	Item@ fishingRod = GetItem( param2 );
	if( !valid( fishingRod ) )
	{
		return 0;
	}
	
	if( param0 == 0 )
	{
        PlayGenericSound( map, cr.HexX, cr.HexY, "fishing_reel1.ogg", 5 );
		if( floater.HAS_FISH <= 0 )
		{
			uint roll = Random( 1 , 100 );
			if( roll > 85 )
			{
				floaterBite( cr, floater, fishingRod );
			}
			else if( roll <= 3 )
			{
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_CATCH_ALGAE );
				cr.AddItem( PID_ALGAE, 1 );
				FinishFishing( cr, floater ); 
			}
		}
		else
		{
			if( Random( 1, 3 ) != 1 )
			{
				floaterBite( cr, floater, fishingRod );
			}
		}
		return Random( 3, 6 ) * 1000;
	}
	else
	{
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		DeleteItem( floater );
		return 0;
	}
}

uint e_floaterCheck( uint[]@ values )
{
	uint itemId = values[0];
	Item@ floater = GetItem( itemId );
	if( !valid( floater ) )
	{
		return 0;		
	}
	
	uint crtterId = values[1];
	Critter@ cr = GetCritter( crtterId );
	if( !valid( cr ) )
	{ 
		EraseTimeEvent( floater.EVENT );
		floater.EVENT = 0;
		DeleteItem( floater );
		return 0;		
	}

	if( cr.ParamBase[ ST_LTP_TIME ] == -1 || cr.ParamBase[ ST_LTP_TYPE_DIR_HEX ] == 0 || ( floater.HAS_BAIT == 0 && floater.HAS_FISH == 0 ) )
	{
		if( floater.HAS_FISH > 0 )
		{
			StartMenuFishing( cr, floater );
			return 0;
		}
		
		if( valid( cr ) )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_TAKE_ROD_OUT );
			FinishFishing( cr, floater );
		}
		else
		{
			EraseTimeEvent( floater.EVENT );
			floater.EVENT = 0;
			DeleteItem( floater );
		}				
		return 0;
	}
	return REAL_SECOND( 1 );
}

void floaterBite( Critter& cr, Item& floater, Item& fishingRod )
{
	if( !FLAG( floater.Flags, ITEM_HIDDEN ) )
	{	
		SETFLAG( floater.Flags, ITEM_HIDDEN );
		uint[] values = { floater.Id, fishingRod.Id, cr.Id };
		
		if (floater.HAS_FISH == 0 && Random( 1, 2 ) == 2 )
		{
			Fish@ fish = getFish( floater );
			if( valid( fish ) )
			{ 
				floater.HAS_FISH = fish.pid;
				floater.FISH_SIZE = fish.size;
				floater.FISH_STAMINA = fish.stamina;
				fishingRod.HAS_BAIT = 0;
				
				uint val = floater.DEPTH * 100 + 50;
				if( Random( 0, val ) < int( fishingSkill(cr) ) )
				{
					floater.SHOW_FISH = 1;
				}
				
				fishAction( cr, floater );
				CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_hookedFish", values, true );
			}
		}
		CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_floaterUp", values, true );
	}
	else
	{		
		UNSETFLAG( floater.Flags, ITEM_HIDDEN );
	}	
	floater.Update();
}

uint e_floaterUp( uint[]@ values)
{
	if( values.length() != 3 )
	{
		return 0;
	}
	
	uint itemId = values[0];
	Item@ floater = GetItem( itemId );
	if( !valid( floater ) )
	{
		return 0;
	}
	
	uint item2Id = values[1];
	Item@ fishingRod = GetItem( itemId );
	if( !valid( fishingRod ) )
	{
		return 0;
	}
	
	uint crtterId = values[2];
	Critter@ cr = GetCritter( crtterId );
	if( !valid( cr ) )
	{
		return 0;
	}

	floaterBite( cr, floater, fishingRod );
	return 0;
}

uint e_hookedFish( uint[]@ values)
{
	uint itemId = values[0];
	Item@ floater = GetItem( itemId );
	if( !valid( floater) )
	{
		return 0;
	}
	
	uint item2Id = values[1];
	Item@ fishingRod = GetItem( itemId );
	if( !valid( fishingRod ) )
	{
		return 0;
	}
	
	
	if( floater.HAS_BAIT != 0 )
	{
		floater.HAS_BAIT = 0;
		fishingRod.HAS_BAIT = 0;
		
		if( floater.FISH_SIZE == 1 )
		{
			return REAL_SECOND( 150 );
		}
		
		if( floater.FISH_SIZE == 2 )
		{
			return REAL_SECOND( 120 );
		}
		
		if( floater.FISH_SIZE == 3 )
		{
			return REAL_SECOND( 90 );
		}
		
		if( floater.FISH_SIZE == 4 )
		{
			return REAL_SECOND( 60 );
		}
		
		if( floater.FISH_SIZE == 5 )
		{
			return REAL_SECOND( 30 );
		}
	}
	
	floater.HAS_FISH = 0;
	
	uint crtterId = values[2];
	Critter@ cr = GetCritter( crtterId );
	if( valid( cr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_ATE_BAIT );
	}
	
	return 0;
}

uint CheckDepth( Map& map, Item& floater ) 
{
	uint8 depth = 4;
	uint16 hexX = floater.HexX, hexY = floater.HexY;
	
	for( uint i = 0, len = 5; i < len; i++ )
	{
		map.MoveHexByDir( hexX, hexY, i, 7 );
		if( checkWater( map, H2T( hexX ), H2T( hexY ) ) == 0 && ( checkCoast( map, H2T( hexX ), H2T( hexY ) ) != 0 || checkSand ( map, H2T( hexX ), H2T( hexY ) ) != 0 ) )
		{
			depth--;
			break;
		}
		hexX = floater.HexX;
		hexY = floater.HexY;
	}
	
	for( uint i = 0, len = 5; i < len; i++ )
	{
		map.MoveHexByDir( hexX, hexY, i, 5 );
		if( checkWater( map, H2T( hexX ), H2T( hexY ) ) == 0 && ( checkCoast( map, H2T( hexX ), H2T( hexY ) ) != 0 || checkSand ( map, H2T( hexX ), H2T( hexY ) ) != 0 ) )
		{
			depth--;
			break;
		}
		hexX = floater.HexX;
		hexY = floater.HexY;
	}
	
	for( uint i = 0, len = 5; i < len; i++ )
	{
		map.MoveHexByDir( hexX, hexY, i, 3 );
		if( checkWater( map, H2T( hexX ), H2T( hexY ) ) == 0 && ( checkCoast( map, H2T( hexX ), H2T( hexY ) ) != 0 || checkSand ( map, H2T( hexX ), H2T( hexY ) ) != 0 ) )
		{
			depth--;
			break;
		}
		hexX = floater.HexX;
		hexY = floater.HexY;
	}
	return depth;
}

class MenuFishing: CenteredMenuHandler
{
    uint target_id;
    uint map_id;
	
    MenuFishing( Item& floater, Map& map )
	{
        target_id = floater.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
	    if( !valid( map ) ) {return false; }
        Item@ floater = GetItem( target_id );
		if( !valid( floater ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_GOT_AWAY ); 
			return false; 
		}
		
		if( menu.ButtonMsg( STR_FISH_MENU_DRAG ) )
		{
			if( floater.FISH_ACTION == ACTION_JINK )
			{
				floater.FISH_STAMINA = floater.FISH_STAMINA + FisherResponseModifier( floater );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_RESISTS ); 
			}
			else
			{
				floater.FISH_STAMINA = floater.FISH_STAMINA - FisherResponseModifier( floater );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_SUBMITS ); 
			}
			fishAction( cr, floater );
			return true;
		}
		if( menu.ButtonMsg( STR_FISH_MENU_STRIKE ) )
		{
			if( floater.FISH_ACTION == ACTION_PULL )
			{
				floater.FISH_STAMINA = floater.FISH_STAMINA + FisherResponseModifier( floater );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_RESISTS ); 
			}
			else
			{
				floater.FISH_STAMINA = floater.FISH_STAMINA - FisherResponseModifier( floater );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_SUBMITS ); 
			}
			fishAction( cr, floater );
			return true;
		}
		
		if( menu.ButtonMsg( STR_FISH_MENU_PULL_OUT ) )
		{
			if( PlayerSkill( cr ) >= floater.FISH_STAMINA )
			{
				Profit( cr, floater );
				return false;
			}
			else
			{
				floater.FISH_STAMINA = floater.FISH_STAMINA + FisherResponseModifier( floater );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_RESISTS ); 
				fishAction( cr, floater );
				return true;
			}
		}
		
		if( menu.ButtonMsg( STR_FISH_MENU_CUT_LINE ) )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_TAKE_ROD_OUT );
			FinishFishing( cr, floater );
			if( hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) )
			{
				SingleItemProtoChange( cr, PID_ROD, SLOT_HAND1 );
			}
			return false;
		}
		return true;
    }
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		return STR_FISH_MENU_MAIN;
	}
	
    string@ Description( Critter& cr )
	{
		Item@ floater = GetItem( target_id );
		
		string info = "$pullOutFish";
		if( !valid( floater ) )
		{
			info += STR_INSERT_TEXT_LINE( STR_FISH_MENU_FISH_GONE );
			return info;
		}
		
		info += STR_INSERT_TEXT_LINE( STR_FISH_MENU_FISH_ON_HOOK )
			 + "$fishDepth" + floater.DEPTH;
		
		info += "$fishSize";
		if( floater.SHOW_FISH == 1 )
		{
			info += floater.FISH_SIZE;
		}
		else
		{
			info += STR_INSERT_TEXT_LINE( STR_FISH_MENU_CANT_DETERMINE );
		}
		
		info += "$fishAction";
		uint8 fish_action = floater.FISH_ACTION;
		if( floater.SHOW_ACTION == 1 )
		{
			info += STR_INSERT_TEXT_LINE( fish_action == 1 ? STR_FISH_MENU_IS_PULLING : STR_FISH_MENU_MOVES_RAPIDLY );
		}
		else
		{
			info += STR_INSERT_TEXT_LINE( STR_FISH_MENU_CANT_DETERMINE );
		}
		
        return info;
    }

	bool ShouldRedraw( Critter& cr )
	{
		Item@ floater = GetItem( target_id );
		if( !valid( floater ) )
		{
			return false;
		}
		
		if( floater.HAS_FISH > 0 )
		{
			return true;
		}
		else
		{
			FinishFishing( cr, floater );
			if( hasItem( cr, PID_ROD_STRING_HOOK, SLOT_HAND1 ) )
			{
				SingleItemProtoChange( cr, PID_ROD, SLOT_HAND1 );
			}
			return false;
		}
	}
}

void StartMenuFishing( Critter& cr, Item& floater )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuFishing(floater, map);
    iDialogBox@ menu = OpenMenu( cr, "Fishing", handler );
}

void FinishFishing( Critter& cr, Item& floater ) 
{
	if( valid( floater ) )
	{
		Item@ fishingRod = cr.GetItem( PID_ROD_STRING_HOOK, SLOT_HAND1 );
		
		if( valid( fishingRod ) && floater.HAS_BAIT == 0 )
		{
			fishingRod.HAS_BAIT = 0;
		}
		
		EraseTimeEvent( floater.EVENT );
		floater.EVENT = 0;
		DeleteItem( floater );
		
		if( valid( cr ) )
		{
			cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
		}
		
		Map@ map = cr.GetMap();
		if( valid( map ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "fishing_reel1.ogg", 5 );
		}
	}
}

int PlayerSkill( Critter& cr )
{
	int skill = 0;
	skill = skill + cr.ParamBase[ ST_STRENGTH ] + cr.ParamBase[ ST_AGILITY ] + cr.ParamBase[ ST_LUCK ] + fishingSkill(cr);
 	return skill;
}

void Profit( Critter& cr, Item& floater )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return ;
	}
		
	if( !valid( floater ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_GOT_AWAY );
		return;
	}
	
	PlayGenericSound( map, cr.HexX, cr.HexY, "catch_fish.ogg", 10 );
	
	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_CAUGHT_FISH, "$reward@msg item " + ( floater.HAS_FISH * 100 ) + "@" );
	
	cr.AddItem( floater.HAS_FISH, 1 );
	FinishFishing( cr, floater );
	
	int skillNum = SK_FISHING;
	raiseSkill( cr, skillNum );
	
	cr.StatBase[ST_EXPERIENCE] += 25;
	
	ChangeCritterSpeed( cr );
}

void fishAction( Critter& cr, Item& floater )
{
	if( !valid( floater ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_GOT_AWAY );
		return;
	}
	
	floater.SHOW_ACTION = 0;

	if( Random( 1, 100 ) <= 5 )
	{
		if( Random( 1, 100 ) > ( cr.Stat[ST_LUCK] * 2 ) )
		{
			int chance = Random( 1, 100 );
			if( chance <= floater.FISH_SIZE * 10 )
			{
				if( Random( 1, 3 ) == 1 )
				{
					SingleItemProtoChange( cr, PID_ROD, SLOT_HAND1 );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LINE_TOURN );
					floater.HAS_BAIT = 0;
					FinishFishing( cr, floater );
				}
				else
				{
					SingleItemProtoChange( cr, PID_ROD_STRING, SLOT_HAND1 );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOOK_GONE );
					floater.HAS_BAIT = 0;
					FinishFishing( cr, floater );
				}
				return;
			}
		}
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FISH_ATE_BAIT );
		floater.HAS_BAIT = 0;
		FinishFishing( cr, floater );
		return;
	}
	
	uint val = floater.DEPTH * 100 + 50;
	if( Random( 0, val ) < int( fishingSkill(cr) ) )
	{
		floater.SHOW_ACTION = 1;
	}
	
	floater.FISH_ACTION = Random( ACTION_PULL, ACTION_JINK );
}

uint FisherResponseModifier( Item& floater )
{
	uint modifier = floater.FISH_STAMINA;
	modifier = CLAMP( ( modifier * 120 / 100 - modifier ), 0, modifier );
	return modifier;
}

#endif //FISH