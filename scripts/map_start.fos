#ifndef MAP_START
#define MAP_START

#include "_utils.fos"
#include "entire_h.fos"

import void OpenLinkRemote( Critter& player, string& url) from "link";
import void RequestStartGameRemote( Critter& player) from "link";

import uint CountMapPlayers( Map@ map ) from "manager";

#define START_TERMINAL_MODE			Val0
#define MODE_START_TERMINAL			( 0 )
#define MODE_ENTRY_TERMINAL			( 1 )
#define MODE_ARENA_TERMINAL			( 2 )

const uint16[] MaleSkins   = { CRTYPE_DEFAULT_M, CRTYPE_LHD_TRIBAL, CRTYPE_BLD_TRIBAL, CRTYPE_LHD_OLD_TRIBAL, CRTYPE_BLACK_TRIBAL, CRTYPE_OLIMP_TRIBAL, CRTYPE_BLACK_OLIMP_TRIBAL, CRTYPE_BLACK_OLIMP_LH_TRIBAL, CRTYPE_FAT_TRIBAL, CRTYPE_MYRON_TRIBAL, CRTYPE_SULIK_TRIBAL };
const uint16[] FemaleSkins = { CRTYPE_DEFAULT_F, CRTYPE_PUNKESS_TRIBAL, CRTYPE_BL_TRIBAL, CRTYPE_FR_TRIBAL_F, CRTYPE_OLDW_TRIBAL_F, CRTYPE_FY_TRIBAL };

void _StartMapInit( Map& map, bool firstTime )
{
    map.SetEvent( MAP_EVENT_OUT_CRITTER, "_crOut" );
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_crIn" );
}

void _crIn( Map& map, Critter& cr )
{
    if( cr.IsPlayer() && !isGM( cr ) )
    {
        cr.SetEvent( CRITTER_EVENT_USE_ITEM, "_Start_Player_use" );
        cr.SetEvent( CRITTER_EVENT_DROP_ITEM, "_Start_Player_drop" );
        cr.SetEvent( CRITTER_EVENT_ATTACK, "_Start_Player_attack" );
        cr.SetEvent( CRITTER_EVENT_DEAD, "_Start_Player_dead" );
    }
}

void _crOut( Map& map, Critter& cr )
{
	cr.SetEvent( CRITTER_EVENT_USE_ITEM, null );
	cr.SetEvent( CRITTER_EVENT_DROP_ITEM, null );
	cr.SetEvent( CRITTER_EVENT_ATTACK, null );
	cr.SetEvent( CRITTER_EVENT_DEAD, null );
}

void _Start_Player_dead( Critter& cr, Critter@ killer )
{
    Map@ start = GetMapByPid( MAP_UTILITY_START, 0 );
    _crOut( start, cr );
    Item@[] items;
    cr.GetItems( SLOT_ARMOR, items );
    cr.GetItems( SLOT_INV, items );
    cr.GetItems( SLOT_HAND1, items );
    cr.GetItems( SLOT_HAND2, items );
    DeleteItems( items );
}

void _Start_Player_drop( Critter& cr, Item& item )
{
    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_ANNIHILATION );
    if( valid( item ) )
	{
        DeleteItem( item );
	}
}

bool _Start_Player_attack( Critter& cr, Critter& target )
{
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_INAPPROPRIATE );
    return true;
}

bool _Start_Player_use( Critter& cr, Item& item, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_INAPPROPRIATE );
    return true;
}

// Called by dll for character with confirmed Discord role
void StartGame( Critter@ player, int, int, int, string@, int[]@ )
{
    if( !valid( player ) )
	{
        return;
    }
	
    if( player.Param[ QST_GAMEMODE ] != GAME_START )
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_NOT_NEW );
        return;
    }
	
    Map@ map = player.GetMap();
    if( !valid( map ) || map.GetProtoId() != MAP_UTILITY_START )
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_WRONG_MAP );
        return;
    }

    Log( "Starting game for " + player.Id );

    bool tele = false;
    tele = player.TransitToHex( 305 + Random( -3, 3 ), 240 + Random( -3, 3 ), 0 );
    if( !tele )
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_TRY_AGAIN );
    }
	else
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_SURVIVAL );
	}
}

void TeleportToGameZone( Critter& cr, int val )
{
    if( !valid( cr ) )
	{
        return;
	}
	
    Location @ loc = GetLocationByPid( val, 0 );
    if( !valid( loc ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_AREA_INVALID );
        return;
    }

	Map @ map = loc.GetMapByIndex(0);
    if( !valid( map ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_MAP_INVALID );
        return;
    }
	
    cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 200, cr.HexX, cr.HexY );

    cr.SetEvent( CRITTER_EVENT_USE_ITEM, null );
    cr.SetEvent( CRITTER_EVENT_DROP_ITEM, null );
    cr.SetEvent( CRITTER_EVENT_ATTACK, null );
    cr.SetEvent( CRITTER_EVENT_DEAD, null );	
	
	cr.TransitToMap( map.Id, Random( 233, 223 ), Random( 239, 244 ), 0 );
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_GREETING );
	return;
}

// Start terminal
void _StartTerminalInit( Item& terminal, bool firstTime )
{
    terminal.SetEvent( ITEM_EVENT_SKILL, "_UseStartTerminal" );
}

bool _UseStartTerminal( Item& terminal, Critter& cr, int skill )
{
	StartMenuStart( cr, terminal );
	return true;
}

void StartMenuStart( Critter& cr, Item& terminal )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
        return;
    }

    iMenuHandler@ handler = MenuStart( terminal, map );
    iDialogBox@ menu = OpenMenu( cr, "Start_terminal", handler );
}

class MenuStart: CenteredMenuHandler
{
	Item@ terminal;
	Map@ map;
	
    MenuStart( Item& terminal, Map& map )
	{
		@this.terminal = @terminal;
        @this.map = @map;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		Location@ loc = GetLocationByPid( LOCATION_TLJ_ARENA, 0 );
		Map@ tmap0 = null;
		Map@ tmap1 = null;
		if( valid( loc ) )
		{
			@tmap0 = loc.GetMapByIndex( 0 );
			@tmap1 = loc.GetMapByIndex( 1 );
		}
		
		if( terminal.START_TERMINAL_MODE == MODE_START_TERMINAL )
		{  
			if( menu.ButtonMsg( STR_MAP_START_MENU_BEGIN_GAME ) )
			{
				if( cr.ParamBase[ QST_GAMEMODE ] != GAME_START )
				{
					return false;
				}
				
				Item@[] items;
				cr.GetItems( -1, items );
				DeleteItems( items );
				
				cr.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;
				TeleportToGameZone( cr, LOCATION_Hell );
				return false;
			}
			
			if( menu.ButtonMsg( STR_MAP_START_MENU_CHANGE_SKIN ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				uint16[] Skins;
				cr.Stat[ ST_GENDER ] == GENDER_MALE ? Skins = MaleSkins : Skins = FemaleSkins;
				cr.StatBase[ ST_BASE_CRTYPE ];
				uint16 index = Skins.find( cr.StatBase[ ST_BASE_CRTYPE ] );
				if( index < Skins.length() - 1 )
				{
					cr.StatBase[ ST_BASE_CRTYPE ] = Skins[ index + 1 ];
				}
				else
				{
					cr.StatBase[ ST_BASE_CRTYPE ] = Skins[ 0 ];
				}
				
				cr.ChangeCrType( cr.StatBase[ ST_BASE_CRTYPE ] );
				return true;
			}
			
			if( menu.ButtonMsg( STR_MAP_START_MENU_CHANGE_GENDER ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				if( cr.Stat[ ST_GENDER ] == GENDER_MALE )
				{
					cr.StatBase[ ST_GENDER ] = GENDER_FEMALE;
					cr.StatBase[ ST_BASE_CRTYPE ] = CRTYPE_DEFAULT_F;
				}
				else
				{
					cr.StatBase[ ST_GENDER ] = GENDER_MALE;
					cr.StatBase[ ST_BASE_CRTYPE ] = CRTYPE_DEFAULT_M;
				}
				
				cr.ChangeCrType( cr.StatBase[ ST_BASE_CRTYPE ] );
				return true;
			}
		}	
		
		if( terminal.START_TERMINAL_MODE == MODE_ARENA_TERMINAL )
		{
			if( valid( tmap0 ) )
			{
				uint playersCount = CountMapPlayers( tmap0 );
				// string info = " Players: [ " + playersCount + " ]";
				string info = "$playersCount" + STR_INSERT_TEXT_LINE( STR_MAP_START_MENU_PLAYERS_COUNT ) 
							+ "$count" + playersCount;
							
				if( menu.ButtonMsg( STR_MAP_START_MENU_ARENA1, info ) )
				{
					TryTeleport( cr, tmap0 );
					return false;
				}
			}
			
			if( valid( tmap1 ) )
			{
				uint playersCount = CountMapPlayers( tmap1 );
				string info = "$playersCount" + STR_INSERT_TEXT_LINE( STR_MAP_START_MENU_PLAYERS_COUNT ) 
							+ "$count" + playersCount;
							
				if( menu.ButtonMsg( STR_MAP_START_MENU_ARENA2, info ) )
				{
					TryTeleport( cr, tmap1 );
					return false;
				}
			}
		}
					
		return true;
	}
	
	int getDescriptionFile()
    {
    	return TEXTMSG_TEXT;
    }

	int getDescriptionLine()
	{
		if( terminal.START_TERMINAL_MODE == MODE_START_TERMINAL )
		{
			return STR_MAP_START_MENU_START_DESC;
		}
		else if( terminal.START_TERMINAL_MODE == MODE_ENTRY_TERMINAL )
		{
			return STR_MAP_START_MENU_TELEPORT_DESC;
		}
		else
		{
			return STR_MAP_START_MENU_ARENA_DESC;
		}
	}
	
    string@ Description( Critter& player )
	{
		return null;
    }

}

bool TryTeleport( Critter& cr, Map& map )
{
	cr.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;
	int entires = map.CountEntire( ARENA_PLAYER_SPAWN );
	if( entires <= 0 )
	{
		return false;
	}

	uint16 hx = 0, hy = 0;
	map.GetEntireCoords( ARENA_PLAYER_SPAWN, Random( 0, entires - 1 ), hx, hy );
	cr.TransitToMap( map.Id, hx, hy, 0 );

	return true;
}

#endif // MAP_START