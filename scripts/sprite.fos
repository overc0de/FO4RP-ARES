// Author: cvet
// Used in client

#ifndef _SPRITE_
#define _SPRITE_

shared class Sprite
{
    Sprite()
    {
        Id = 0;
        Hash = 0;
        Width = 0;
        Height = 0;
        FrmCount = 0;
        DrawFrame = -1;
    }

    bool Load( string& name, int path )
    {
        if( name.length() > 0 )
            Id = LoadSprite( name, path );
        else
            Id = 0;
        RefreshData();
		return Id != 0;
    }

    bool Load( uint nameHash, uint8 dir )
    {
        Id = LoadSprite( nameHash, dir );
        Hash = nameHash;
        RefreshData();
		return Id != 0;
    }

    bool LoadByIni( string& iniKey, int path )
    {
        string@ name = GetIfaceIniStr( iniKey );
        if( @name != null && name.length() > 0 )
            Id = LoadSprite( name, path );
        else
            Id = 0;
        RefreshData();
		return Id != 0;
    }

    void Draw( int x, int y )
    {
        if( Id != 0 )
            DrawSprite( Id, DrawFrame, x, y, 0 );
    }

    void Draw( int x, int y, bool scratch, bool center, uint color )
    {
        if( Id != 0 )
            DrawSprite( Id, DrawFrame, x, y, Width, Height, scratch, center, color );
    }

    void Draw( int x, int y, uint8 sprIndex )
    {
        if( Id != 0 )
            DrawSprite( Id, DrawFrame, x, y, 0 );
    }

    uint GetHashName()
    {
        return Hash;
    }
	
	void Set( Sprite& other )
	{
		Id = other.Id;
        Hash = other.Hash;
        Width = other.Width;
        Height = other.Height;
        FrmCount = other.FrmCount;
        DrawFrame = other.DrawFrame;
	}

    void RefreshData()
    {
        if( Id != 0 )
        {
            Width = GetSpriteWidth( Id, 0 );
            Height = GetSpriteHeight( Id, 0 );
            FrmCount = GetSpriteCount( Id );
            DrawFrame = -1;
        }
        else
        {
            Width = 0;
            Height = 0;
            FrmCount = 0;
            DrawFrame = -1;
        }
    }

#define VIRTUAL_PROPERTY #( type, name )                  type name 					\
														  { 							\
															get { return _##name; } 	\
															set { _##name = value; }	\
														  } 							\
														  private type _##name;

	VIRTUAL_PROPERTY( uint, Id );
	VIRTUAL_PROPERTY( uint, Hash );
	VIRTUAL_PROPERTY( int, Width );
	VIRTUAL_PROPERTY( int, Height );
	VIRTUAL_PROPERTY( uint, FrmCount );
	VIRTUAL_PROPERTY( int, DrawFrame );
}

shared Sprite@ CreateSprite( uint nameHash, uint8 dir )
{
	Sprite result;
	result.Load( nameHash, dir );
	return result;
}

#endif // _SPRITE_
