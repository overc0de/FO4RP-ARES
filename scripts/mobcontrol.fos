#include "_utils.fos"

#include "entire.fos"
#include "_npc_pids.fos"
#include "_teams.fos"
#include "_bags.fos"
#include "npc_planes_h.fos"
#include "speed_h.fos"
#include "heal_h.fos"
#include "Fractions.fosh"

#define GuardPID        ( 128 )
#define CRITTER_TEAM    ( 128 )

import void GM_MobInit( Critter& npc ) from "mob";
import void hotkey_critter_anim( Critter& cr, int param0 ) from "general_unsafe";

void unsafe_follow_or_hold( Critter& player, int ID, int p1, int p2, string@ p3, int[]@ IDs )
{
	Critter@ npc = GetCritter( ID );
	if( !valid(npc) || npc.IsPlayer() || npc.IsDead() || npc.IsKnockout() )
	{
		return;
	}
	
	bool playerOwner = ( npc.Stat[ST_FOLLOW_CRIT] == int( player.Id ) );
	bool noOwner = ( npc.Stat[ST_FOLLOW_CRIT] == 0 );
	
	if( isGM( player ) || ( CantResist( npc ) && ( playerOwner || noOwner ) ) )
	{
		Mob mob = Mob( ID );
		mob.setHome();
		mob.chase( player );
	}
	else
	{
		player.Say( SAY_NETMSG, "Цель не слушается." );
	}
}

void unsafe_useBandage( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		useBandage( player, p0, p1, p2, p3, IDs );
	}
}

void useBandage( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) )
	{
		return;
	}

    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).useBandage();
    }
}

void unsafe_useMeds( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		useMeds( player, p0, p1, p2, p3, IDs );
	}
}

void useMeds( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) )
	{
		return;
	}

    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).useMeds();
    }
}

void unsafe_relaxNPC( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		relaxNPC( player, p0, p1, p2, p3, IDs );
	}
}

void relaxNPC( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) )
	{
		return;		
	}

    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).setHome();
		Mob( IDs[i] ).relax();
    }
}

void unsafe_setControl( Critter& player, int ID, int groupFlag, int p2, string@ p3, int[]@ p4 )
{
	if( isGM( player ) )
	{
		setControl( player, ID, groupFlag, p2, p3, p4 );
	}
}

void setControl( Critter& player, int ID, int groupFlag, int p2, string@ p3, int[]@ p4 )
{
	Mob( ID ).setControl( player.Id, groupFlag );
}

void unsafe_clearPlans( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		clearPlans( player, p0, p1, p2, p3, IDs );
	}
}

void clearPlans( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).clearPlans();
    }
}

void unsafe_stopMob( Critter& player, int x, int y, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		stopMob( player, x, y, p2, p3, IDs );
	}
}

void stopMob( Critter& player, int x, int y, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).stop( x, y );
    }
}

void unsafe_MobHoldPosition( Critter& player, int x, int y, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		MobHoldPosition( player, x, y, p2, p3, IDs );
	}
}

void MobHoldPosition( Critter& player, int x, int y, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) )
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Critter@ cr = GetCritter( IDs[i] );
		if( valid( cr ) )
		{
			if( cr.Param[ CR_HOLD_POSITION ] == 0 )
			{
				cr.ParamBase[ CR_HOLD_POSITION ] = 1;
				cr.ParamBase[ CR_FIXED_SPEED ] = 1;
				cr.StatBase[ ST_WALK_TIME] = 0;
				cr.StatBase[ ST_RUN_TIME] = 0;
				cr.ModeBase[ MODE_NO_PUSH ] = 1;
				cr.ModeBase[ MODE_NO_WALK ] = 1;
				cr.ModeBase[ MODE_NO_RUN ] = 1;
			}
			else
			{
				cr.ParamBase[ CR_HOLD_POSITION ] = 0;
				cr.ParamBase[ CR_FIXED_SPEED ] = 0;
				cr.ModeBase[ MODE_NO_PUSH ] = 0;
				cr.ModeBase[ MODE_NO_WALK ] = 0;
				cr.ModeBase[ MODE_NO_RUN ] = 0;
				ChangeCritterSpeed( cr );
			}
		}
    }
}

void unsafe_moveMob( Critter& player, int x, int y, int runFlag, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		moveMob( player, x, y, runFlag, p3, IDs );
	}
}

void moveMob( Critter& player, int x, int y, int runFlag, string@, int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).move( x, y, ( runFlag != 0 ) );
    }
}

void unsafe_attackMob( Critter& player, int target_id, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		attackMob( player, target_id, p1, p2, p3, IDs );
	}
}

void attackMob( Critter& player, int target_id, int p1, int p2, string@ p3, int[]@ IDs )
{
    Critter@ target = GetCritter( target_id );
	
	if( !valid( IDs ) || !valid( target ) )
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).attack( target );
    }
}

void unsafe_addEnemy( Critter& player, int target_id, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		addEnemy( player, target_id, p1, p2, p3, IDs );
	}
}

void addEnemy( Critter& player, int target_id, int p1, int p2, string@ p3, int[]@ IDs )
{
    Critter@ target = GetCritter( target_id );
	
	if( !valid( IDs ) || !valid( target ) )
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).addEnemy( target );
    }
}

void unsafe_assaultMob( Critter& player, int p0, int p1, int p2, string@ p3, int[] @ vals )
{
	if( isGM( player ) )
	{
		assaultMob( player, p0, p1, p2, p3, vals );
	}
}

void assaultMob( Critter& player, int p0, int p1, int p2, string@ p3, int[] @ IDs )
{
 	if( !valid( IDs ) ) 
	{
		return;
	}
	
	Critter@[] players;
    Map@ map = player.GetMap();
	if( !valid( map ) || map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players ) == 1 ) //ignore self
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).assault( players );
    }
}

void unsafe_deleteMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		deleteMob( player, p0, p1, p2, p3, IDs );
	}
}

void deleteMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).delete();
    }
}

void unsafe_FreeMobById( Critter& player, int ID, int groupFlag, int, string@, int[]@ )
{
	Mob( ID ).free( groupFlag );
}

void unsafe_HomeMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		HomeMob( player, p0, p1, p2, p3, IDs );
	}
}

void HomeMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
	player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_GM_ZH_COMMAND );
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).setHome();
    }
}

void unsafe_chaseMob( Critter& player, int ID, int p1, int p2, string@ p3, int[] @ IDs )
{
	if( isGM( player ) )
	{
		chaseMob( player, ID, p1, p2, p3, IDs );
	}
}

void chaseMob( Critter& player, int ID, int p1, int p2, string@ p3, int[] @ IDs )
{
    Critter@ target = GetCritter( ID );
	
	if( !valid( IDs ) || !valid( target ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).chase( target );
    }
}

void unsafe_GatherMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		GatherMob( player, p0, p1, p2, p3, IDs );
	}
}

void GatherMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( !valid( IDs ) || !valid( player.GetMap() ) )
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		GatherMob( IDs[i], player );
    }
}

bool GatherMob( uint id, Critter& player )
{
	return GatherMob( GetCritter( id ), player );
}

bool GatherMob( Critter@ cr, Critter& player )
{
	Map@ map = player.GetMap();
	
	if( !valid( cr ) || !valid( map ) )
	{
		return false;
	}

	if( cr.IsPlayer() && cr.Param[ QST_GAMEMODE ] == GAME_START )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_GM_ZG_COMMAND, "$name" + crInfo( cr ) );
		return false;
	}

	Location@ loc = map.GetLocation();
	if( !valid(loc) )
	{		
		return false;
	}

	uint8 temp_dir = player.Dir;
	for( uint j = 0; j < 6; j++ )
	{
		uint16 hexX = player.HexX, hexY = player.HexY;
		map.MoveHexByDir( hexX, hexY, ( temp_dir + j ) % 6, 2 );
		
		if( !map.IsHexPassed( hexX, hexY ) )
		{
			continue;
		}			
		
		cr.SetWorldPos( loc.WorldX, loc.WorldY );
		cr.TransitToMap( map.Id, hexX, hexY, 0 );
		
		break;
	}
	
	return true;
}

uint follow( Critter& cr, int master, uint& rate )//TODO: rework
{
    cr.ClearEnemyStack();
    Critter@ daddy = GetCritter( cr.Stat[ ST_KILLER_PERSON ] );
    Map@ daddymap = null;
    Map@ crmap = cr.GetMap();
    
	if( valid( daddy ) )
	{
		string@ lexem = cr.GetLexems();
		uint index = findFirstOf( lexem, "_", 0 );
		string oldLex = substring( lexem, 0, index );
		cr.SetLexems( oldLex );
		cr.ParamBase[ CR_AFK_MODE ] = 0;

        @daddymap = daddy.GetMap();
    }
	else
	{
		string@ lexem = cr.GetLexems() + "_" + "ждёт";
		cr.SetLexems( lexem );
		cr.ParamBase[ CR_AFK_MODE ] = 1;

		cr.ModeBase[MODE_NO_HOME] = 0;
        return REAL_SECOND( 30 );
	}
	
    cr.ErasePlane( -1, true );

    if( ( !valid( daddymap ) ) && ( valid( crmap ) ) )
    {
        cr.TransitToGlobalGroup( daddy.Id );
    }
    else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( daddymap.Id == crmap.Id ) )
    {
		if( GetDistantion( cr.HexX, cr.HexY, daddy.HexX, daddy.HexY ) > 5 )
		{
			AddWalkPlane( cr, 0, daddy.HexX, daddy.HexY, GetDirection( cr.HexX, cr.HexY, daddy.HexX, daddy.HexY ), GetDistantion( cr.HexX, cr.HexY, daddy.HexX, daddy.HexY ) > 5, Random( 2, 4 ) );
		}
		
		cr.SetHomePos( daddy.HexX, daddy.HexY, daddy.Dir );
		cr.ModeBase[MODE_NO_HOME] = 1;		
    }
    else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( crmap.Id != daddymap.Id ) )
    {
        uint8 findPos = 1;
        while( findPos <= 10 )
        {
            if( daddymap.IsHexPassed( daddy.HexX + findPos, daddy.HexY + findPos ) )
            {
                cr.TransitToMap( daddymap.Id, daddy.HexX + findPos, daddy.HexY + findPos, Random( 0, 5 ) );
                break;
            }
            findPos++;
        }
    }
	
    return REAL_SECOND( 1 );
}

class Mob
{
	Critter@ cr;
	
	Mob( int id )
	{
		@cr = GetCritter( id );
	}
	
	Mob( Critter@ cr )
	{
		@this.cr = cr;
	}
	
	bool validNPC()
	{
		if( !valid( cr ) || cr.IsPlayer() )
		{			
			return false;
		}
		
		return true;
	}
	
	void clearPlans()
	{
		cr.ErasePlane( -1, true );
		cr.ClearEnemyStack();
	}
	
	bool stop( int x, int y )
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		clearPlans();
		cr.EraseTimeEvents( CTE_ROTTEN );
		cr.SetDir( GetDirection( cr.HexX, cr.HexY, x, y ) );
		return true;
	}
	
	bool move( int x, int y, bool runFlag )
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		cr.ModeBase[ MODE_NO_HOME ] = 1;
		clearPlans();
		AddWalkPlane( cr, 1, x, y, GetDirection( cr.HexX, cr.HexY, x, y ), runFlag, 0 );
		return true;
	}
	
	bool attack( Critter@ target )
	{
		if( !validNPC() || !valid( target ) )
		{
			return false;
		}
		
		cr.ModeBase[ MODE_NO_HOME ] = 1;
		clearPlans();
		AddAttackPlane( cr, 0, target, __RunOnCombat );
		cr.AddEnemyInStack( target.Id );
		
		return true;
	}
	
	bool addEnemy( Critter@ target )
	{
		if( !validNPC() || !valid( target ) )
		{
			return false;
		}
		
		if( cr.Stat[ ST_TEAM_ID ] == target.Stat[ ST_TEAM_ID ] )
		{
			return false;
		}
		
		Fraction@ fraction = GetFraction( cr );
		if( valid( fraction ) && GetFractionRelation( fraction, target ).Value == Relation_Ally )
		{
			return false;
		}
		
		AddAttackPlane( cr, 0, target, __RunOnCombat );
		cr.AddEnemyInStack( target.Id );
		
		return true;
	}	

	bool assault( Critter@[] targets )
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		for( uint i = 0, l = targets.length(); i < l; i++ )
		{
			AddAttackPlane( cr, 0, targets[i], __RunOnCombat );
			cr.AddEnemyInStack( targets[i].Id );
		}
		
		return true;
	}
	
	bool delete()
	{
		if( !validNPC() || cr.Stat[ ST_DIALOG_ID ] != 0 )
		{
			return false;
		}
		
		DeleteNpc( cr );	
		
		return true;
	}
	
	bool setHome()
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		cr.SetHomePos( cr.HexX, cr.HexY, cr.Dir );
		cr.ModeBase[ MODE_NO_HOME ] = 0;
		
		return true;
	}
	
	bool free( int groupFlag )
	{
		if( !valid( cr ) ) 
		{			
			return false;
		}
		
		cr.ParamBase[ CR_CONTROLLED_GROUP ] &= ~( 1 << groupFlag );
		if( groupFlag != 0 || cr.ParamBase[ CR_CONTROLLED_GROUP ] == 0 )
		{
			cr.ModeBase[ MODE_NO_HOME ] = 0;
			cr.ParamBase[ MERC_MASTER_ID ] = 0;
		}
		
		return true;
	}
	
	bool chase( Critter@ target )
	{
		if( !validNPC() || !valid( target ) )
		{
			return false;
		}
		
		clearPlans();

		if( cr.StatBase[ ST_KILLER_PERSON ] == int( target.Id ) )
		{
			cr.EraseTimeEvents( CTE_ROTTEN );
			cr.StatBase[ ST_KILLER_PERSON ] = 0;
			cr.StatBase[ ST_FOLLOW_CRIT ] = 0;
			cr.ModeBase[ MODE_NO_HOME ] = 0;
		}
		else
		{
			cr.ModeBase[ MODE_NO_HOME ] = 1;
			cr.StatBase[ ST_KILLER_PERSON ] = target.Id;
			cr.StatBase[ ST_FOLLOW_CRIT ] = target.Id;
			cr.AddTimeEvent( "mobcontrol@follow", REAL_SECOND( 1 ), CTE_ROTTEN );
		}

		return true;
	}

	bool setControl( int ownerId, uint groupFlag ) 
	{
		if( !valid( cr ) )
		{
			return false;
		}
		
		if( cr.ParamBase[ MERC_MASTER_ID ] != ownerId )
		{
			if( cr.ParamBase[ MERC_MASTER_ID ] != 0 )
			{
				Critter@ lastOwner = GetCritter( cr.ParamBase[ MERC_MASTER_ID ] );
				if( valid( lastOwner ) )
				{
					lastOwner.RunClientScript( "client_gui@_LostCritterControl", cr.Id, 0, 0, null, null );
				}
			}
			
			cr.ParamBase[ CR_CONTROLLED_GROUP ] = 0;
		}
		
		cr.ParamBase[ CR_CONTROLLED_GROUP ] |= 1 << groupFlag;
		cr.ParamBase[ MERC_MASTER_ID ] = ownerId;
		
		return true;
	}
	
	bool relax()
	{
		if( !valid( cr ) )
		{
			return false;
		}
		
		hotkey_critter_anim( cr, cr.Param[ CR_IS_RELAXING ] == 0 ? 5 : 0 );
		return true;
	}
	
	bool useMeds()
	{
		if( !validNPC() )
		{
			return false;
		}		
		
		return UseBestHealingItemAvailable( cr );
	}
	
	bool useBandage()
	{
		if( !validNPC() )
		{
			return false;
		}		
		
		return AttemptBandaging( cr );
	}
}

