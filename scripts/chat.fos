#ifndef __CHAT_MODULE__
#define __CHAT_MODULE__

#include "_utils.fos"
#include "chat.fosh"

#ifdef __CLIENT

import bool out_command( string& message, int& sayType ) from "client_main";
import bool out_speak( string& message, int& sayType ) from "client_main";

class ReplaceSpeechFilter : MessageHandler
{
	array<string@> Replacements;
	array<int> ReplacementSayTypes;

	ReplaceSpeechFilter@ Add( string@ replacement, int sayType )
	{
		this.Replacements.insertLast(replacement);
		this.ReplacementSayTypes.insertLast(sayType);
		return this;
	}

	bool resolve( uint& critterID, string& text, uint8& volume, int& sayType ) 
	{
		if( this.Replacements.length == 0 || !(SayType(sayType).IsSpeech() || SayType(sayType).IsRadio() ) )
		{
			return false;
		}

		int rand = Random(0, this.Replacements.length - 1);
		text = this.Replacements[rand];
		sayType = this.ReplacementSayTypes[rand];
		return false;
	}
}

class SpeechRemoveNonVerbalSymbols : MessageHandler
{
	bool RejectMessage;

	SpeechRemoveNonVerbalSymbols() 
	{
		this.RejectMessage = false;
	}

	bool IsForbiddenSymbol( uint char ) 
	{
		switch( char )
		{
			case '(': case ')': case '[': case ']': case '|': case '{': case '}': case '<': case '>': 
			case '@': case '#': case '~': case '^': case '_':
				return true;
		}
		return false;
	}

	bool resolve( uint& critterID, string& text, uint8& volume, int& sayType ) 
	{
		if( !SayType(sayType).IsSpeech() || text.length() == 0 )
		{
			return false;
		}
		
		for( uint i = 0, length = text.length(); i < length; i++ )
		{
			if( this.IsForbiddenSymbol( text[i] ) )
			{
				this.RejectMessage = true;
				return true;
			}
		}
		return false;
	}
}

class SpeechIllegibilityGenerator : MessageHandler
{
	bool IsVowel( uint char ) 
	{ 
		switch( char )
		{
			case 224: case 238: case 253: case 243: case 254: case 255: case 251: case 229: case 232: case 184:
			case 192: case 197: case 200: case 206: case 211: case 219: case 221: case 222: case 223: case 168:
			case 'a': case 'e': case 'i': case 'o': case 'y': case 'u':
			case 'A': case 'E': case 'I': case 'O': case 'Y': case 'U':
				return true;
		}
		return false;
	}

	bool IsAlphanumeric(uint8 char) 
	{
		return ('0' <= char && '9' >= char) || ('a' <= char && 'z' >= char) || ('A' <= char && 'Z' >= char) || (192 <= char && 255 >= char) || 184 == char || 168 == char;
	}

	bool resolve(uint& critterID, string& text, uint8& volume, int& sayType) 
	{
		if( "" == text || !SayType(sayType).IsSpeech() )
		{
			return false; // if return true next symbols wont work
		}

		float integrity = 1.0f;
		CritterCl@ chosen = GetChosen();
		CritterCl@ speaker = GetCritter(critterID);

		if( valid( chosen ) && isGM( chosen ) )
		{
			return false;
		}

		if( valid( speaker ) )
		{
			int distance = GetDistantion(chosen.HexX, chosen.HexY, speaker.HexX, speaker.HexY);
			float diff = int( volume ) - distance;

			if( diff < 0 )
			{ 
				integrity = integrity / float(-diff);
			}
			
			if( volume <= 5 && diff < 0 )
			{
				integrity = integrity * 10 * float( chosen.Stat[ST_PERCEPTION] ) / 100 ;
			}
		}

		if( integrity < 1.0f )
		{
			if( integrity < 0.06f )
			{
				text = "...";
			}
			else
			{
				array<string@> parts = {};
				int penalty = 0;
				int threshold = int( floor( integrity * 200 ) );
				for( uint i = 0, length = text.length(), y = 0; i < length && y <= i; i++ )
				{
					if ( !IsAlphanumeric(text[i]) && ' ' != text[i] )
					{
						text[i] = ' ';
					}

					if( text[i] == ' ' || ( i > 0 && this.IsVowel(text[i]) && ( i == length - 1 || !this.IsVowel(text[i+1] ) ) ) )
					{
						uint offset = i - y + 1;
						string part = substring(text, y, y + offset < length ? offset : length - y);
						int roll = Random( 0, 100 );

						if( roll > ( threshold - penalty ) )
						{
							if( parts.length == 0 || (parts[parts.length - 1] != "...") ) parts.insertLast("...");
						} 
						else
						{
							parts.insertLast(part);
							penalty += int( floor( ( 1.0 - integrity ) * ( 15 - chosen.Stat[ ST_PERCEPTION ] ) ) );
						}
						y = i + 1;
						continue;
					}
				}
				text = join(parts, "");
				if( text == "......" )
				{
					text = "...";
				}
			}
		}
		return false;
	}
}

bool InMessage( string& message, int& sayType, uint& senderCritterID, uint& delay )
{
	if( message.length() > 1 && message[0] == '|' )
	{
		return true;
	}

	ChatMessage@ chatMessage = ChatMessage( message, sayType, senderCritterID );

	chatMessage.OnInMessage( SpeechIllegibilityGenerator() );
	chatMessage.InMessage( message, sayType );

	return true;
}

bool OutMessage( string& message, int& sayType )
{
	CritterCl@ chosen = GetChosen();
	ItemCl@ headItem = _CritGetItemHead( chosen );
	if( valid( chosen ) )
	{
		RunServerScriptUnsafe( "rp_chat@unsafe_stopTyping", 0, 0, 0, null, null );
	}
	
	if( sayType == SAY_RADIO && FLAG( chosen.Param[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) )
	{
		Message( TEXTMSG_GAME, STR_RADIO_FAILSAFE_ON );
		return false;
	}

	if( message.length() > 1 
		&& ( message[ 0 ] == '#' || message[ 0 ] == '%' || message[ 0 ] == '$' || message[ 0 ] == '!' || message[ 0 ] == '~' )
		&& ( ( message[ 1 ] >= 'A' && message[ 1 ] <= 'z' ) || ( message[ 1 ] >= '0' && message[ 1 ] <= '9' ) || ( message[ 1 ] == ' ' ) )
	)
	{ 
		if( __waiting )
		{
			Message( TEXTMSG_GAME, STR_COMMANDS_NOT_ALLOWED );
			return false;
		} 
		return out_command(message, sayType);
	}

	if( message.length() >= 2 &&( message[0] == '.' || message[0] == '/' ) && ( message[1] == 205 || message[1] == 237 || message[1] == 'n' || message[1] == 'N' ) )
	{
		sayType = SAY_NARATIVE;
		message = substring( message, 2, message.length() - 2 );
	}
	else if( message.length() >= 2 &&( message[0] == '.' || message[0] == '/' ) && ( message[1] == 'p' || message[1] == 'P' ) )
	{
		sayType = SAY_PET;
		message = substring( message, 2, message.length() - 2 );
	}
	else if( message.length() > 1 && message[0] == '|' )
	{
		return out_speak( message, sayType );
	}
	else
	{
		ChatMessage@ chatMessage = ChatMessage( message, sayType, !valid( chosen ) ? 0 : chosen.Id );
		SpeechRemoveNonVerbalSymbols@ nvsFilter = SpeechRemoveNonVerbalSymbols(); 
		chatMessage.OnOutMessage(nvsFilter);

		if( valid( headItem ) )
		{ 
			if( ( headItem.GetProtoId() == PID_BALL_GAG || headItem.GetProtoId() == PID_PART_OF_ROPE ) && headItem.Val1 == 1 )
			{
				chatMessage.OnOutMessage(
					ReplaceSpeechFilter()
						.Add( GetMsgStr( TEXTMSG_GAME, STR_EMOTE_MUMBLING0 ), SAY_EMOTE )
						.Add( GetMsgStr( TEXTMSG_GAME, STR_EMOTE_MUMBLING1 ), SAY_EMOTE )
						.Add( GetMsgStr( TEXTMSG_GAME, STR_EMOTE_MUMBLING2 ), SAY_EMOTE )
						.Add( GetMsgStr( TEXTMSG_GAME, STR_EMOTE_MUMBLING3 ), SAY_EMOTE )
				);
			}
		}

		chatMessage.OutMessage( message, sayType );

		if( nvsFilter.RejectMessage )
		{
			Message( TEXTMSG_GAME, STR_PROHIBITED_CHARS );
			return false;
		}
	}

	if( message.length() > 100 )
	{
		RunServerScriptUnsafe( "rp_chat@unsafe_SayRemote", sayType, 0, 0, message, null );
		return false;
	}
	
	if( sayType == SAY_PET )
	{
		int command = 0;
		string lwrmess = strlwr( message );
		string@[] slpitmess = splitEx( lwrmess, " " );
		for( uint i = 0; i < slpitmess.length(); i++ )
		{
			string find = slpitmess[i];
			if( find == "sit" )
			{
				command = MSG_PET_SIT_MESSAGE;
				break;
			}			
			else if( find == "stand" )
			{
				command = MSG_PET_STAND_MESSAGE;
				break;
			}	
			else if( find == "stay" )
			{
				command = MSG_PET_STAY_MESSAGE;
				break;
			}
			else if( find == "follow" )
			{
				command = MSG_PET_FOLLOW_MESSAGE;
				break;
			}
			else if( find == "protect" )
			{
				command = MSG_PET_PROTECT_MESSAGE;
				ChangeCursor( CURSOR_RTS );
				break;
			}
			else if( find == "guard" )
			{
				command = MSG_PET_GUARD_MESSAGE;
				ChangeCursor( CURSOR_RTS );
				break;
			}
			else if( find == "attack" )
			{
				command = MSG_PET_ATTACK_MESSAGE;
				ChangeCursor( CURSOR_RTSA );
				break;
			}
			else if( find == "kill" )
			{
				command = MSG_PET_KILL_MESSAGE;
				ChangeCursor( CURSOR_RTSA );
				break;
			}
		}
		
		if( command < MSG_PET_PROTECT_MESSAGE && command > 0 )
		{
			RunServerScriptUnsafe( "general_unsafe@unsafe_PetCommand", command, 0, MESSAGE_TO_I_SEE , null, null );
		}
		else if( command >= MSG_PET_PROTECT_MESSAGE )
		{
			RunServerScriptUnsafe( "general_unsafe@unsafe_SelectPetTarget", command, 0, 0 , null, null );
		}
	}
	
	return out_speak( message, sayType );
}

bool MapMessage( string& message, uint16& hexX, uint16& hexY, uint& color, uint& delay )
{
	int sayType = SAY_NORM;
	if( color == COLOR_CHAT_RADIO )
	{
		sayType = SAY_RADIO;
	} 
	else if( color == COLOR_CHAT_SHOUT )
	{
		sayType = SAY_SHOUT;
	}
	ChatMessage@ chatMessage = ChatMessage( message, sayType, 0 );
	chatMessage.InMessage( message, sayType );
	return true;
}
	
#endif // __CLIENT