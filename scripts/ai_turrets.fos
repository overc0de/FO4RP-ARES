#ifndef AI_TURRETS
#define AI_TURRETS

#include "_utils.fos"
#include "ai_turrets_h.fos"
#include "npc_planes_h.fos"
#include "gateway_h.fos"
#include "entire_h.fos"

void _TurretInit( Critter& turret, bool firstTime )
{
	turret.SetEvent( CRITTER_EVENT_SHOW_CRITTER,	"_CritterChecKillList" );
	turret.SetEvent( CRITTER_EVENT_HIDE_CRITTER,	"_CritterOutOfSight" );
    turret.SetEvent( CRITTER_EVENT_IDLE,			"_Idle" );
    turret.SetEvent( CRITTER_EVENT_PLANE_BEGIN,		"_PlaneBegin" );
	turret.SetEvent( CRITTER_EVENT_PLANE_END,		"_PlaneEnd" );
    turret.SetEvent( CRITTER_EVENT_DEAD,			"_MyDeath" );
    turret.SetEvent( CRITTER_EVENT_ATTACKED,		"_Attacked" );
	
	turret.ShowCritterDist1 = RADIUS_WARN;
    turret.SetEvent( CRITTER_EVENT_SHOW_CRITTER_1,	"_CritterInWarningRange" );
	turret.SetEvent( CRITTER_EVENT_HIDE_CRITTER_1,	"_CritterOutOfWarningRange" );
	
	turret.ShowCritterDist2 = RADIUS_KILL;
	turret.SetEvent( CRITTER_EVENT_SHOW_CRITTER_2,	"_CritterInAttackRange" );
}

void _CritterChecKillList( Critter& turret, Critter& target )
{
	//bool markedForTermination = false;
	//if( markedForTermination( target ) ) {
	//	AddAttackPlane( turret, AI_PLANE_ATTACK_PRIORITY, target.Id );
	//}
}

void _CritterOutOfSight( Critter& turret, Critter& target )
{
	if( turret.IsDead() )
	{
		return;
	}
	
	if( target.IsDead() )
	{
		return;
	}
	
	if( turret.CheckEnemyInStack( target.Id ) ) 
	{	
		turret.EraseEnemyFromStack( target.Id );
		EraseAttackPlane( turret, target );
	}
}

void _Idle( Critter& turret )
{
	if( turret.IsPlayer() ) 
	{
		turret.SetEvent( CRITTER_EVENT_IDLE, null );
		return;
	}

	if( turret.IsDead() || turret.IsKnockout() ) 
	{
		return;
	}

	if( turret.IsBusy() || !turret.IsNoPlanes() ) 
	{
		return;
	}
}

int _PlaneBegin( Critter& turret, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	if( turret.IsDead() )
	{
		return PLANE_DISCARD;
	}
	
    if( plane.Type == AI_PLANE_ATTACK ) 
	{
        Critter@ target = GetCritter( plane.Attack_TargId );
        if( !valid( target ) ) 
		{
			return PLANE_RUN_GLOBAL;
		}

        if( target.Stat[ ST_TEAM_ID ] == turret.Stat[ ST_TEAM_ID ] ) 
		{
			return PLANE_DISCARD; 
		}

	} 
	else if ( reason == REASON_FROM_SCRIPT ) 
	{
		return PLANE_KEEP;
	}
    return PLANE_RUN_GLOBAL;
}

int _PlaneEnd( Critter& turret, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem ) 
{
	return PLANE_RUN_GLOBAL;
}

void _MyDeath( Critter& turret, Critter@ killer )
{
	turret.DropPlanes();
    turret.ClearEnemyStack();
	turret.PARENT_TERMINAL = 0;
	turret.SECURITY_ACCESS_CARD = 0;
	turret.LASER_FENCE_GRID = 0;
}

bool _Attacked( Critter& turret, Critter& target )
{
	if( !valid( turret ) )
	{
		return false;
	}
	
	if( turret.IsDead() )
	{
		return false;
	}
	
	if( !valid( target ) )
	{
		return false;
	}
	
	if( target.IsDead() )
	{
		return false;
	}
	
	AddAttackPlane( turret, AI_PLANE_ATTACK_PRIORITY, target.Id );
    return true;
}

void _CritterInWarningRange( Critter& turret, Critter& target )
{
	if( turret.IsDead() || turret.IsKnockout() ) 
	{
		return;
	}
	
	if( !turret.IsSee(target) ) 
	{ 
		return;
	}
	
	if( !valid( target ) )
	{
		return;
	}
	
	if( target.IsDead() )
	{
		return;
	}
	
	if( isGM( target ) ) 
	{
		return;
	}
	
	if( hasItem( target, turret.SECURITY_ACCESS_CARD ) ) 
	{
		return;
	}
	else
	{

		turret.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_COMBAT, STR_15_SECONDS_TO_COMPLY );
		target.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		target.Wait( 500 );
		
		uint16 hx = turret.HexX, hy = turret.HexY;
		uint16 tx = target.HexX, ty = target.HexY;
		Map@ map = turret.GetMap();
		if( !valid( map ) )
		{
			return;
		}
	
		PlayGenericSound( map, hx, hy, "Passcard_not_found.ogg", 20 );
		uint dir = GetDirection( hx, hy, tx, ty );
		turret.SetDir( dir );
		turret.SetHomePos( turret.HexX, turret.HexY, turret.Dir );
		uint[] values = { turret.Id, target.Id, dir, 30 }; //30 iterations for 500ms each
		CreateTimeEvent( AFTER( REAL_SECOND( 0 ) ), "e_targetLock", values, true );
		map.PlaySound( "WRW1XXX1.mp3", hx, hy, 10 );
	}
}

void _CritterOutOfWarningRange( Critter& turret, Critter& target )
{
	if( !valid( turret ) )
	{
		return;
	}
	
	if( turret.IsDead() || turret.IsKnockout() )
	{
		return;
	}
	
	if( !valid( target ) )
	{
		return;
	}

	if( target.IsDead() )
	{
		return;
	}

	if( isGM( target ) ) 
	{
		return;
	}
	
	if( hasItem( target, turret.SECURITY_ACCESS_CARD ) )
	{
		return;
	}
	
	Map@ map = turret.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	uint16 hx = turret.HexX, hy = turret.HexY;
	uint16 tx = target.HexX, ty = target.HexY;
	uint dir = GetDirection( hx, hy, tx, ty );
	turret.SetDir( dir );
	turret.SetHomePos( turret.HexX, turret.HexY, turret.Dir );
	PlayGenericSound( map, hx, hy, "perimeter_resumed.ogg", 20 );
	turret.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_COMBAT, STR_PERIMETER_DEFENCE_RESUMED );
}

void _CritterInAttackRange( Critter& turret, Critter& target )
{
	if( !valid( turret ) )
	{
		return;
	}
	
	if( turret.IsDead() || turret.IsKnockout() ) 
	{
		return;
	}
	
	if( !valid( target ) )
	{
		return;
	}
	
	if( target.IsDead() )
	{
		return;
	}
	
	if( isGM( target ) ) 
	{ 
		return; 
	}
		
	if( hasItem( target, turret.SECURITY_ACCESS_CARD ) ) 
	{
		return;
	}
	
	Map@ map = turret.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	PlayGenericSound( map, turret.HexX, turret.HexY, "marked_term.ogg", 20 );
	turret.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_COMBAT, STR_MARKED_FOR_TERMINATION );
	attackProtocol( turret, target );
}

uint e_targetLock( uint[]@ values )
{
	Critter@ turret = GetCritter( values[0] );
	Critter@ target = GetCritter( values[1] );
	uint dir = values[2];
	uint ticksLeft = values[3];
	
	if( !valid( turret ) )
	{
		return 0;
	}
	
	if( turret.IsDead() || turret.IsKnockout() ) 
	{
		return 0;
	}
	
	if( !valid( target ) ) 
	{ 
		return 0; 
	}
	
	if( target.IsDead() )
	{
		return 0;
	}
	
	if( isGM( target ) ) 
	{ 
		return 0;
	}
	
	if( hasItem( target, turret.SECURITY_ACCESS_CARD ) ) 
	{
		return 0;
	}
	
	Map@ map = turret.GetMap();
	if( !valid( map ) )
	{
		return 0;
	}
	
	uint16 hx = turret.HexX, hy = turret.HexY;
	uint16 tx = target.HexX, ty = target.HexY;
		
	if( ticksLeft > 0 )
	{
		ticksLeft --;
		values[3] = ticksLeft;
		
		if( ticksLeft == 10 )
		{
			PlayGenericSound( map, hx, hy, "5_seconds.ogg", 20 );
			turret.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_COMBAT, STR_5_SECONDS );
		}
		
		uint distance = GetDistantion( hx, hy, tx, ty );
		
		if( distance > RADIUS_WARN ) 
		{
			return 0;
		}
		
		if( distance <= RADIUS_KILL ) 
		{
			activateFence( turret );
			return 0;
		}

		uint newdir = GetDirection( hx, hy, tx, ty );
		if( newdir != dir ) 
		{
			PlayGenericSound( map, hx, hy, "Intruderer.ogg", 20 );
			turret.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_COMBAT, STR_INTRUDER_ALERT );
			attackProtocol( turret, target );
			activateFence( turret );
			return 0;
		}
		return REAL_MS( 500 );
	}
	else
	{
		PlayGenericSound( map, hx, hy, "initiating_attack.ogg", 20 );
		turret.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_COMBAT, STR_TERMINATION_PROTOCOL );
		attackProtocol( turret, target );
		activateFence( turret );
		return 0;
	}
}

void attackProtocol( Critter& turret, Critter& target )
{
	if( !valid( turret ) )
	{
		return;
	}
	
	if( turret.IsDead() || turret.IsKnockout() ) 
	{
		return;
	}
	
	if( !valid( target ) ) 
	{ 
		return; 
	}
	
	if( target.IsDead() )
	{
		return;
	}
	
	AddAttackPlane( turret, AI_PLANE_ATTACK_PRIORITY, target.Id );
}

void activateFence( Critter& turret )
{
	if( !valid( turret ) )
	{
		return;
	}
	
	if( turret.IsDead() || turret.IsKnockout() ) 
	{
		return;
	}

	Map@ map = turret.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	uint16 hx = 0, hy = 0;
	uint8 dir = 0;
	Item@ emitter = GetItem( turret.LASER_FENCE_GRID );
	if( valid( emitter ) )
	{
		ToggleLaserFence( map, emitter, true );
		uint[] values = { map.Id, emitter.Id }; 
		CreateTimeEvent( AFTER( REAL_SECOND( 60 ) ), "ai_turrets@e_DisableFence", values, true );
	}
}

uint e_DisableFence( uint[]@ values )
{
	Map@ map = GetMap( values[0] );
	if( !valid( map ) )
	{
		return 0;
	}
	
	Item@ emitter = GetItem( values[1] );
	if( valid( emitter ) )
	{
		ToggleLaserFence( map, emitter, false );
	}
	return 0;
}


#endif //AI_TURRETS