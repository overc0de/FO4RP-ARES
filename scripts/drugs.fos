#ifndef DRUGS
#define DRUGS

#include "_utils.fos"
#include "drugs_h.fos"
#include "radiation_h.fos"
#include "paralysis_h.fos"
#include "poison_h.fos"
#include "heal_h.fos"

void CheckPoison( Critter& target, Item& drug )
{
	if( drug.Val0 >= 100 )
	{
		if( target.Param[ QST_GAMEMODE ] == GAME_TEST )
		{
			target.Say( SAY_NETMSG, "|0xFFFF00 You feel neurotoxin, it's strength is ~" + drug.Val0 + "." );
		}
		
		target.ParamBase[CR_VAL9] = 1; //fast paralysis mode
		AffectParalysis( target, drug.Val0 );
	}
	else
	{
		if( target.Param[ QST_GAMEMODE ] == GAME_TEST )
		{
			target.Say( SAY_NETMSG, "|0xFFFF00 Consumed product neurotoxin level is not enough which is ~" + drug.Val0 + "." );
		}
	}	
}

void UseDrug( Critter& cr, Item& drug )
{
    SetDrug( cr, drug.GetProtoId() );
	CheckPoison( cr, drug );
    _SubItem( drug, 1 );
	uint16 drugPid = drug.GetProtoId();
	uint16 returnPid = 0;
	switch( drugPid )
	{
		case( PID_JET ):
		case( PID_TREB ):
		case( PID_VINT ):
			returnPid = PID_EMPTY_JET;
			break;
		case( PID_PSYCHO ):
			returnPid = PID_HYPODERMIC_NEEDLE;
			break;
		case( PID_JET_ANTIDOTE ):
		case( PID_ANTIDOTE ):
			returnPid = PID_BOTTLE_GLASS;
			break;
	}
	if( returnPid != 0 )
	{
		cr.AddItem( returnPid, 1 );
	}
}

bool UseDrugOn( Critter& cr, Critter& onCr, Item& drug )
{
	if( !onCr.IsDead() && ( onCr.Stat[ ST_CURRENT_HP ] < 0 || onCr.IsKnockout() || isOwningNPC( cr, onCr ) || sameFaction( cr, onCr ) ) )
	{
		onCr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_USE_ON_SUCC );
		cr.TimeoutBase[ TO_SK_FIRST_AID ] = FIRST_AID_TIMEOUT( cr );
		SetDrug( onCr, drug.GetProtoId() );
		CheckPoison( cr, drug );
		_SubItem( drug, 1 );
		return true;
	}
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_THIS_DID_NOTHING );
	onCr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_USE_ON_FAIL );
	return false;
}

//~run drugs TotallyClear crId 0 0
void TotallyClear( Critter& cr, int crId, int p1, int p2 )
{
	Critter@ target = getTarget( cr, crId );
	if( !valid( target ) )
	{
		cr.Say( SAY_NETMSG, "Critter #" + crId + " not found!" );
		return;
	}
	DropDrugEffects( target );
}

void DropDrugEffects( Critter& cr )
{
    Item@[] items;
    cr.GetItems( SLOT_ARMOR, items );
    cr.GetItems( SLOT_HAND1, items );
    cr.GetItems( SLOT_HAND2, items );
    cr.GetItems( SLOT_MISC,  items );
    cr.GetItems( SLOT_HEAD,  items );
    cr.GetItems( SLOT_BACK,  items );
	
    for( uint i = 0, l = items.length(); i < l; i++ )
	{
        _CritMoveItem( cr, items[ i ], SLOT_INV );
	}
	
    for( uint i = STAT_EXT_BEGIN; i <= STAT_EXT_END; i++ )
	{
        cr.StatBase[ i ] = 0;
    }
    cr.EraseTimeEvents( DrugsIdentifiers );

    for( uint i = ADDICTION_BEGIN; i <= ADDICTION_END; i++ )
	{
        cr.AddictionBase[ i ] = 0;
	}
	
    for( uint i = 0, l = items.length(); i < l; i++ )
    {
        Item@ item = items[ i ];
        if( valid( item ) && item.GetType() == ITEM_TYPE_ARMOR )
        {
            _CritMoveItem( cr, item, SLOT_ARMOR );
            break;
        }
    }
}

bool SetDrug( Critter& cr, uint16 drugPid )
{
	if( drugPid == PID_JET_ANTIDOTE )
    {
        for( uint n = 0, l = DrugsIdentifiers.length(); n < l; n++ )
		{
			uint[] rates;
			uint count = cr.GetTimeEvents( DrugsIdentifiers[n], null, null, rates );
			for( uint i = 0; i < count; i++ )
			{
				DropDrug( cr, DrugsIdentifiers[n], RATE_TO_STAGE( rates[ i ] ) );
			}
			cr.EraseTimeEvents( DrugsIdentifiers[n] );
		}
		
		DropDrugEffects( cr );
	
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_ADDICTION_END );
        return true;
    }

    // Chem flags
    uint flags = 0;
    if( cr.Trait[ TRAIT_CHEM_RELIANT ] != 0 )
	{
        flags |= DRUG_EFFECT_DIV2_WITHDRAWAL | DRUG_EFFECT_MUL2_ADDICTION;
    }
	if( cr.Trait[ TRAIT_CHEM_RESISTANT ] != 0 )
	{
        flags |= DRUG_EFFECT_DIV2_ADDICTION | DRUG_EFFECT_DIV2_DURATION;
	}
    // Other drugs
    uint[] indexes;
    uint[] rates;
    uint count = cr.GetTimeEvents( drugPid, indexes, null, rates );
    int  index = GetDrugTableIndex( drugPid );

	if( count > 0 )
	{
		if( non_stackable_drug.find( drugPid ) != -1 )
			return true;
	}

	if( index < 0 )
	{
		string text = "SetDrug: there is no drug PID " + drugPid + " affecting cr.Id " + cr.Id;
		DebugLog( text );
		testInfo( cr, text );
		return false;
	}

    // Check
    if( DrugEffects[ index + TABLE_DRUG_ADDICT ] >= 0 ) // Addiction perk aviability
    {
        uint positive = 0;
        uint negative = 0;
        for( uint i = 0; i < count; i++ )
        {
            uint stage = RATE_TO_STAGE( rates[ i ] );
            if( stage <= 1 )
			{
                positive++;
            }
			else if( stage == 2 )
			{
                negative++;
			}
		}

        if( positive >= 2 - negative / 2 )
        {
            int addict = DrugEffects[ index + TABLE_DRUG_ADDICT ];
            int addictProc = DrugEffects[ index + TABLE_DRUG_PROC ];
            if( FLAG( flags, DRUG_EFFECT_MUL2_ADDICTION ) )
			{
                addictProc *= 2;
			}
			
			if( FLAG( flags, DRUG_EFFECT_DIV2_ADDICTION ) )
			{
                addictProc /= 2;
			}
			
			if( cr.Addiction[ addict ] == 0 && Random( 1, 100 ) <= addictProc )
			{
                cr.AddictionBase[ addict ] = 1;
			}
			else
			{
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_NOTHING_HAPPENS );
            }
			
			return true;
        }
    }

    // Clear active addictions
    uint deleted = 0;   // After erase indexes decrement on one position
    for( uint i = 0; i < count; i++ )
    {
        uint stage = RATE_TO_STAGE( rates[ i ] );
        if( stage >= 3 )
        {
            DropDrug( cr, drugPid, stage );
            cr.EraseTimeEvent( indexes[ i ] - deleted );
            deleted++;
        }
    }
	
    cr.AddTimeEvent( "cte_Drug", 0, drugPid, FORM_RATE( 0, flags ) );
	return true;
}

int GetDrugTableIndex( uint16 drugPid )
{
	int index = -1;
	index = DrugsIdentifiers.find( drugPid );

    index *= 30;
    return index;
}

uint ProcessDrug( Critter& cr, uint16 drugPid, uint& rate )
{
	testInfo( cr, "Drug " + drugPid + " is affecting at rate: " + rate + "." );
	
    uint stage = RATE_TO_STAGE( rate );
    uint flags = RATE_TO_FLAGS( rate );

    if( cr.IsDead() )
	{
        return REAL_MINUTE( 5 );               // Stop drug processing
    }
	
	if( ( drugPid == PID_JET || drugPid == PID_TREB || drugPid == PID_VINT ) && stage >= 4 )
	{
        return REAL_HOUR( 5 );                 // Only after Jet Antidote was used
	}
	
	if( drugPid == PID_FPASLNC && Random( 1, 2 ) == 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FEEL_SICK );
		cr.AddTimeEvent( "vomit@cte_vomit", REAL_MINUTE( Random( 5, 15 ) ), CTE_VOMIT, 0 );
	}

    int  index = GetDrugTableIndex( drugPid );
	
	if( index < 0 )
	{
		string text = "ProcessDrug: There is no drug PID " + drugPid + " affecting cr.Id " + cr.Id + " ñ rate " + rate;
		DebugLog( text );
		testInfo( cr, text );
		return 0;
	}
	
    uint duration = 0;

    if( stage == 0 || // Instant effect
        stage == 1 || // Withdrawal
        stage == 2 || // Normalize
        stage == 3 || // Addiction begin
        stage == 4 )  // Addiction end
    {
        for( uint i = 0; i < 4; i++ )
        {
			string stat_before = "|0xFFFF00";
			string stat_after = "|0xFFFF00";
			
			int stat = DrugEffects[ index + TABLE_STAT( i ) ];
            int amount = DrugEffects[ index + TABLE_AMOUNT( i, stage ) ];
            if( i == 1 && DrugEffects[ index + TABLE_STAT( 0 ) ] == -2 )
			{
                amount = Random( DrugEffects[ index + TABLE_AMOUNT( 0, stage ) ], amount );
            }
			
			if( stat < 0 )
			{
                continue;
			}
			
			if( stat <= STAT_END )
			{
            	int statVal = cr.Stat[ stat ];
            	if( stat < STAT_EXT_BEGIN )
				{
					stat_before = cr.Stat[ stat ] + "/" + cr.StatBase[ stat ];
					
             	  	cr.StatBase[ STAT_EXT_BEGIN + stat ] += amount;
					
					stat_after = cr.Stat[ stat ] + "/" + cr.StatBase[ stat ];
				}
            	else if( stat == ST_CURRENT_HP )
            	{
					stat_before = cr.Stat[ ST_CURRENT_HP ] + "/" + cr.Stat[ ST_MAX_LIFE ];
					
                	cr.StatBase[ ST_CURRENT_HP ] = CLAMP( statVal + amount, -9999, cr.Stat[ ST_MAX_LIFE ] );
                	if( amount < 0 && cr.Stat[ ST_CURRENT_HP ] < DeathBehaviour( cr ).get() )
					{
                    	cr.ToDead( Random( 0, 1 ) == 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null );
					}
					stat_after = cr.Stat[ ST_CURRENT_HP ] + "/" + cr.Stat[ ST_MAX_LIFE ];
            	}
           	 	else if( stat == ST_POISONING_LEVEL )
				{
					stat_before = cr.StatBase[ ST_POISONING_LEVEL ];
               		
					AffectPoison( cr, amount );
					
					stat_after = cr.StatBase[ ST_POISONING_LEVEL ];
				}
            	else if( stat == ST_RADIATION_LEVEL )
				{
					stat_before = cr.StatBase[ ST_RADIATION_LEVEL ];
					
               		AffectRadiation( cr, amount );
					
					stat_after = cr.StatBase[ ST_RADIATION_LEVEL ];
				}
				else
				{
					Log( "Attempt to change stat #" + stat + " with drug PID #" + drugPid + " for cr.Id " + cr.Id + " with rate " + rate + "." );
                	continue;
				}

            	statVal = cr.Stat[ stat ] - statVal;
            	if( statVal > 0 )
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_STAT_GAIN, "$name @msg game " + STR_PARAM_NAME( stat ) + "@$value" + statVal );
				}
            	else if( statVal < 0 )
				{
                	cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_STAT_LOSE, "$name @msg game " + STR_PARAM_NAME( stat ) + "@$value" + ( -statVal ) );
				}
			}
			else
			{ //Instant Parameter change hotfix
				stat_before = cr.Param[ stat ] + "/" + cr.ParamBase[ stat ];
			
            	cr.ParamBase [stat] += DrugEffects [index + TABLE_AMOUNT (i, 0)];
				
				stat_after = cr.Param[ stat ] + "/" + cr.ParamBase[ stat ];			
            }

			string@ paramName_str = GetGameMsgStr( STR_PARAM_NAME( stat ) );
			string paramName = valid( paramName_str ) ? paramName_str : ( "param #" + stat );
			
			string action = amount >= 0 ? "gains +" : "looses ";
			SayLog( cr, crInfo( cr ) + " " + action + amount + " to " + paramName + ", there was before: " + stat_before + " became now: " + stat_after );
        }

        int addict = DrugEffects[ index + TABLE_DRUG_ADDICT ];
        if( stage == 0 )     // To withdrawal
        {
            duration = DrugEffects[ index + TABLE_DURATION( stage ) ];
            if( FLAG( flags, DRUG_EFFECT_DIV2_DURATION ) )
			{
                duration /= 2;
            }

            int addictProc = DrugEffects[ index + TABLE_DRUG_PROC ];
            if( FLAG( flags, DRUG_EFFECT_MUL2_ADDICTION ) )
			{
                addictProc *= 2;
            }
			
			if( FLAG( flags, DRUG_EFFECT_DIV2_ADDICTION ) )
			{
                addictProc /= 2;
            }
			
			if( stage == 0 && addict >= 0 && Random( 1, 100 ) <= addictProc )
			{
                cr.AddictionBase[ addict ] = 1;
				SayLog( cr, crInfo( cr ) + " became addicted to: " + itemName( drugPid ) + "." );
			}
			
			SayLog( cr, crInfo( cr ) + " got high from " + itemName( drugPid ) + "." );
        }
        else if( stage == 1 )     // To normalize
        {
            duration = DrugEffects[ index + TABLE_DURATION( stage ) ];
            if( FLAG( flags, DRUG_EFFECT_DIV2_DURATION ) )
			{
                duration /= 2;
			}
			
			if( cr.ParamBase[ CR_JETTED ] != 0 )
			{
				cr.ParamBase[ CR_JETTED ] = 0;
			}
			
			SayLog( cr, crInfo( cr ) + " got backlash from " + itemName( drugPid ) + "." );
        }
        else if( stage == 2 && addict >= 0 && cr.Addiction[ addict ] != 0 ) // To addiction
        {
            // Find already processed addiction
            uint[] rates;
            uint count = cr.GetTimeEvents( drugPid, null, null, rates );
            bool isPresent = false;
            for( uint i = 0; i < count; i++ )
            {
                if( RATE_TO_STAGE( rates[ i ] ) >= 3 )
                {
					isPresent = true;
                    break;
                }
            }
			
            if( !isPresent )
			{
                duration = DrugEffects[ index + TABLE_DURATION( stage ) ];
			}
			
			if( cr.ParamBase[ CR_JETTED ] != 0 )
			{
				cr.ParamBase[ CR_JETTED ] = 0;
			}
			
			SayLog( cr, crInfo( cr ) + " starts to suffer from addiction to: " + itemName( drugPid ) + "." );
        }
        else if( stage == 3 )     // To end of addiction
        {
            duration = DrugEffects[ index + TABLE_DURATION( stage ) ];
            if( FLAG( flags, DRUG_EFFECT_DIV2_WITHDRAWAL ) ) {
                duration /= 2;
			}

			if( cr.ParamBase[ CR_JETTED ] != 0 )
			{
				cr.ParamBase[ CR_JETTED ] = 0;
			}
		
			SayLog( cr, crInfo( cr ) + " stops suffering from addiction to: " + itemName( drugPid ) + "." );
        }
        else if( stage == 4 )     // End of addiction
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_ADDICTION_END );
            if( addict >= 0 && cr.Addiction[ addict ] != 0 )
			{
                cr.AddictionBase[ addict ] = 0;
				SayLog( cr, crInfo( cr ) + " stops being addicted to: " + itemName( drugPid ) + "." );
			}
        }
    }

    stage++;
    rate = FORM_RATE( stage, flags );
    return REAL_SECOND( duration * ( cr.Param[ QST_GAMEMODE ] == GAME_TEST ? 1 : 60 ) );
}

//~run drugs setDrugState crId drugPID stage
void setDrugState( Critter& cr, int crId, int drugPID, int stage )
{
	Critter@ target = getTarget( cr, crId );
	
	if( !valid( target ) )
	{
		cr.Say( SAY_NETMSG, "Critter #" + crId + " not found!" );
		return;
	}

	DropDrug( target, drugPID, stage );
}

void DropDrug( Critter& cr, uint16 drugPid, uint stage )
{
    if( stage == 0 || stage == 3 )
        return;                           // Instant effect not happens or already normalize or wait Addidional effect

    int index = GetDrugTableIndex( drugPid );

	if( index < 0 )
	{
		string text = "DropDrug: drug PID: " + drugPid + " affecting cr.Id " + cr.Id + " with stage " + stage + "not found.";
		DebugLog( text );
		testInfo( cr, text );
		return;
	}

    if( stage == 1 || // Instant effect already
        stage == 2 || // Withdrawal already
        stage == 4 )  // Addiction already
    {
        for( uint i = 0; i < 4; i++ )
        {
            int stat = DrugEffects[ index + TABLE_STAT( i ) ];
			if( stat == -1 )
			{
				continue;
			}
            int amount = DrugEffects[ index + TABLE_AMOUNT( i, stage + ( stage == 1 ? -1 : 0 ) ) ]; // Turn
            if( stage == 1 )
			{
                amount = -amount;
			}
			
			if( stat < STAT_EXT_BEGIN )
			{
				string stat_before = cr.Stat[ stat ] + "/" + cr.StatBase[ stat ];
				
                cr.StatBase[ STAT_EXT_BEGIN + stat ] += amount;
			
				string stat_after = cr.Stat[ stat ] + "/" + cr.StatBase[ stat ];
				
				string@ paramName_str = GetGameMsgStr( STR_PARAM_NAME( stat ) );
				string paramName = valid( paramName_str ) ? paramName_str : ( "parameter #" + stat );
				
				string action = amount >= 0 ? "gained +" : "lost ";
				SayLog( cr, crInfo( cr ) + " removes effect of: " + itemName( drugPid ) + " (stage #" + stage + "), " + action + amount + " from " + paramName + ". was: " + stat_before + " now: " + stat_after );
			}
        }
    }
}

uint cte_Drug( Critter& cr, int identifier, uint& rate )
{
    return ProcessDrug( cr, identifier, rate );
}

//TIME EVENT DEBUGGER
class NamedString
{
	string _name;
	int id;

	NamedString( int id, string name )
	{
		this._name = name;
		this.id = id;
	}

	string name() { return _name; }

	bool match( int id ) { return this.id == id; }
}

class NamedStringList
{
	NamedString@[] list;
	
	NamedStringList@ add( int id, string name )
	{
		return add( NamedString( id, name ) );
	}
	
	NamedStringList@ add( string name, int id )
	{
		return add( NamedString( id, name ) );
	}
	
	NamedStringList@ add( NamedString@ item )
	{
		list.insertLast( item );
		return this;
	}
	
	string name( int id )
	{
		if( !valid( list ) )
		{
			return "[null]";
		}
		
		for( uint i = 0, l = list.length(); i < l; i++ )
		{
			if( list[i].match( id ) )
			{
				return list[i].name();
			}
		}
		return "";
	}
}

NamedStringList@ TimeEvents;
NamedStringList@ DrugEvents;

void init_TimeEvents()
{
	@TimeEvents = NamedStringList()
		.add( "POISON", CTE_POISON )
		.add( "RADIATION", CTE_RADIATION )
		.add( "TRADER", CTE_TRADER )
		.add( "DRAGGING", CTE_DRAGGING )
		.add( "BURNING", CTE_BURNING )
		.add( "SLOWRELOAD", CTE_SLOWRELOAD )
		.add( "DELETECORPSE", CTE_DELETECORPSE )
		.add( "ROTTEN", CTE_ROTTEN )
		.add( "SEX", CTE_HAD_SEX )
		.add( "TIRED", CTE_TIRED )
		.add( "HEAL", CTE_HEAL )
		.add( "DOC", CTE_DOC )
		.add( "BLEED", CTE_BLEED )
		.add( "HUNGER", CTE_HUNGER )
		.add( "DYSPNEA", CTE_DYSPNEA )
		.add( "QUICKHEAL", CTE_QUICKHEAL )
		.add( "SNEAKING", CTE_SNEAKING )
		.add( "TYPING", CTE_TYPING )
		.add( "DIRT", CTE_DIRT )
		.add( "THIRST", CTE_THIRST )
		.add( "PA_AUTH", CTE_PA_AUTH )
		.add( "VOMIT", CTE_VOMIT )
		.add( "DRUNK", CTE_DRUNK )
		.add( "VOMIT_WARN", CTE_VOMIT_WARN )
		.add( "AUTODOC", CTE_AUTODOC_PROCEDURE )
		.add( "OVERDOSE", CTE_GLOBAL_OVERDOSE )
		.add( "WETNESS", CTE_WETNESS )
		.add( "BANDAGE", CTE_BANDAGE )
		.add( "AFK", CTE_AFK )
		.add( "RELAX", CTE_RELAX )
		.add( "DAZED", CTE_DAZED )
		.add( "STUNNED", CTE_STUNNED )
		.add( "RAPID_FIRE", CTE_RAPID_FIRE )
		;
}

void init_DrugEvents()
{
	@DrugEvents = NamedStringList();
	
	for( uint i = 0, l = DrugsIdentifiers.length(); i < l; i++ )
	{
		DrugEvents.add( getPID_name( DrugsIdentifiers[i] * 100 ), DrugsIdentifiers[i] );
	}
}

string TimeEvent( int id ) 
{
	if( !valid( TimeEvents ) )
	{
		init_TimeEvents();
	}
	return TimeEvents.name( id );
}

string DrugEvent( int id ) 
{
	if( !valid( DrugEvents ) )
	{
		init_DrugEvents();
	}
	return DrugEvents.name( id );
}

//~run drugs killTimeEvent crId index id
void killTimeEvent( Critter& cr, int crId, int index, int id )
{
	Critter@ target = getTarget( cr, crId );
	
	if( !valid( target ) )
	{
		cr.Say( SAY_NETMSG, "Critter #" + crId + " not found!" );
		return;
	}
	
	if( id != 0 )
	{
		target.EraseTimeEvent( id );
		cr.Say( SAY_NETMSG, "And event: " + id + " was deleted." );
		return;
	}
	
	if( index != 0 )
	{
		uint count = target.GetTimeEvents( index, null, null, null );
		target.EraseTimeEvents( index );
		cr.Say( SAY_NETMSG, "There were deleted " + count + " time-events." );
		return;
	}
}

void unsafe_enlistTimeEvents(Critter& cr, int targetId, int, int, string@, int[]@ )
{
	if( !isGM( cr ) )
	{
		return;
	}
	enlistTimeEvents( cr, targetId, 0, 0 );
}

//~run drugs enlistTimeEvents crId 0 0
void enlistTimeEvents( Critter& cr, int crId, int p1, int p2 )
{
	Critter@ target = getTarget( cr, crId );

	if( !valid( target ) )
	{
		cr.Say( SAY_NETMSG, "Critter #" + crId + " not found!" );
		return;
	}
	
	uint list = 0;
    cr.Say( SAY_NETMSG, "List for cr #" + crId + ":\n" );

	for( int i = 0; i < 65000; i++ )
	{
		uint[] index;
		uint[] duration;
		uint[] rate;
		uint count = target.GetTimeEvents( i, index, duration, rate );
		if( count > 0 )
		{
			list++;
			
			string drugname = DrugEvent( i );
			string timename = TimeEvent( i );
			if( timename.length() > 1 && drugname.length() > 1 )
			{
				drugname = " and " + drugname;
			}
			
			cr.Say( SAY_NETMSG, "Time event #" + i + " \'" + timename + drugname + "\':" );
			for( uint j = 0; j < count; j++ )
			{
				string time = DeltaTime_HMS( duration[j] );
				cr.Say( SAY_NETMSG,
					StyledText( "|", "" + j, ") #", 30 ) +
					StyledText( "|", "" + index[j], " after", 60 ) +
					StyledText( "|", time, " at rate ", 120 ) +
					StyledText( "|", "" + rate[j], ";", 0 ) +
					"" );
			}
		}
	}
	cr.Say( SAY_NETMSG, "There is " + list + " of time events." );
}

#endif // DRUGS