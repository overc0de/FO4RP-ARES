#ifndef TRAP_MODULE
#define TRAP_MODULE

#include "_utils.fos"
#include "trap_h.fos"
#include "combat_h.fos"

class TrapItem
{
	uint16 pid;
	uint16 armed_pid;
	uint8 trap_type;
	bool can_rotate;
	string sound_on;
	string sound_off;
	
	TrapItem( uint16 pid, uint16 armed_pid, uint8 trap_type, bool can_rotate, string sound_on, string sound_off )
	{
        this.pid = pid;
		this.armed_pid = armed_pid;
		this.trap_type = trap_type;
		this.can_rotate = can_rotate;
		this.sound_on = sound_on;
		this.sound_off = sound_off;
	}
}

class TrapItemCollection
{
	TrapItem@[] trapItems;
	TrapItemCollection()
	{
	}
	
	TrapItemCollection@ trapItem( uint16 pid, uint16 armed_pid, uint8 trap_type, bool can_rotate, string sound_on, string sound_off )
	{
		this.trapItems.insertLast( TrapItem( pid, armed_pid, trap_type, can_rotate, sound_on, sound_off ) );
		return this;
	}
	
	TrapItem@ get_by_pid( uint16 pid ) 
	{
		for( uint i = 0, len = this.trapItems.length(); i < len; i++ )
		{
			if( this.trapItems[i].pid == pid || this.trapItems[i].armed_pid == pid )
			{
				return this.trapItems[i];
			}
		}
		return null;
	}
}

TrapItemCollection@ trapItems = TrapItemCollection()
//					pid								armed_pid							   trap_type	  can_rotate		sound_on		  sound_off
	.trapItem( PID_TRAP_DEACTIVATED			,	PID_TRAP_ACTIVE						,	TRAP_MECHANICAL	,	false	,	"trapsetup2.ogg"	,	"gotcha.ogg"		)
	.trapItem( PID_MINE						,	PID_ACTIVE_MINE						,	TRAP_MINE		,	false	,	"mine.mp3"			,	"mine.mp3"			)
	.trapItem( PID_MINE_PLASMA				,	PID_ACTIVE_MINE_PLASMA				,	TRAP_MINE		,	false	,	"mine.mp3"			,	"mine.mp3"			)
	.trapItem( PID_MINE_PULSE				,	PID_ACTIVE_MINE_PULSE				,	TRAP_MINE		,	false	,	"mine.mp3"			,	"mine.mp3"			)
	.trapItem( PID_IMPOVISED_TRAP			,	PID_IMPOVISED_TRAP_ACTIVE			,	TRAP_TRIPWIWE	,	true	,	"tripwire_set.mp3"	,	"tripwire_cut.mp3"	)
	.trapItem( PID_IMPOVISED_TRAP_PLASMA	,	PID_IMPOVISED_TRAP_PLASMA_ACTIVE	,	TRAP_TRIPWIWE	,	true	,	"tripwire_set.mp3"	,	"tripwire_cut.mp3"	)
	.trapItem( PID_IMPOVISED_TRAP_PULSE		,	PID_IMPOVISED_TRAP_PULSE_ACTIVE		,	TRAP_TRIPWIWE	,	true	,	"tripwire_set.mp3"	,	"tripwire_cut.mp3"	)
	;

TrapItem@ GetTrapItem( Item@ item ) 
{
    uint16 pid = item.GetProtoId();

    return trapItems.get_by_pid( pid );
}

bool TryPlantMine( Critter& cr, Item& trap, uint16 hexX, uint16 hexY )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( trap ) )
	{
		return false;
	}
	
	if( GetDistantion( cr.HexX, cr.HexY, hexX, hexY ) > 1 )
	{
		return false;
	}
	
	cr.Animate( 0, ANIM2_PICKUP, null, false, true );
	
	if( !CheckTrapInstallPlace( map, hexX, hexY ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TRAP_HEX_BUSY );
		return false;
	}
	
	TrapItem@ trapItm = GetTrapItem( trap );
	if( !valid( trapItm ) )
	{
		return false;
	}
	
	int hardness = 0;
	
	int skill = cr.Skill[ SK_TRAPS ];
	if( trapItm.trap_type == TRAP_MECHANICAL )
	{
		skill += int( cr.Skill[ SK_OUTDOORSMAN ] * 0.5f );
	}
	
	if( Random( 0, 100 ) < skill )
	{
		hardness = skill;
	}
	else if( !LuckCheck( cr ) )
	{
		trap.TRAP_OWNER = cr.Id;
		if( trapItm.trap_type != TRAP_MECHANICAL )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LOW_SKILL_TRAP_KABOOM );
			DetonateTrap( trap );
		}
		else
		{
			InjureCritter( cr, Random( trap.Proto.Weapon_DmgMin_0, trap.Proto.Weapon_DmgMax_0 ), trap.Proto.Weapon_DmgType_0, cr.Dir, cr.Id, Random( 0, 1 ) == 0 ? HIT_LOCATION_LEFT_ARM : HIT_LOCATION_RIGHT_ARM, false );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SNARE_FAILED );
			PlayGenericSound( map, hexX, hexY, trapItm.sound_off, 6 );
		}
		return true;
	}
	else
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LOW_SKILL_TRAP_LUCKY );
		return true;
	}

	cr.StatBase[ ST_CURRENT_AP ] -= 5000;
	
	Item@ armedTrap = map.AddItem( hexX, hexY, trapItm.armed_pid, 1 );
	if( !valid( armedTrap ) )
	{
		return false;
	}
	
	PlayGenericSound( map, hexX, hexY, trapItm.sound_on, 6 );
	
	armedTrap.TRAP_SKILL = skill;
	armedTrap.TrapValue = hardness;
	armedTrap.TRAP_HARDNESS = hardness;
	armedTrap.TRAP_OWNER = cr.Id;
	armedTrap.TRAP_CRITICAL_CHANCE = cr.Stat[ ST_CRITICAL_CHANCE ];
	armedTrap.Update();
	_SubItem( trap, 1 );
	return true;
}

void _InitTrap( Item& armedTrap, bool firstTime )
{
	armedTrap.SetEvent( ITEM_EVENT_SKILL, "_OnTrapSkillUse" );
	armedTrap.SetEvent( ITEM_EVENT_WALK, "_TrapWalk" );
}

bool _OnTrapSkillUse( Item& trap, Critter& cr, int skill )
{
	TrapItem@ trapItm = GetTrapItem( trap );
	if( !valid( trapItm ) )
	{
		return false;
	}
	
	switch( skill )
	{
		case( SK_TRAPS ):
		{
			TryDisarm( trap, cr );
			break;
		}
		case( SK_REPAIR ):
		{
			if( trapItm.can_rotate )
			{
				RotateTrap( trap );
			}
			else
			{
				if( trapItm.trap_type != TRAP_MECHANICAL )
				{
					DetonateTrap( trap );
				}
				else
				{
					TrapDisarm( trap );
				}
			}
			break;
		}
		case( SKILL_PICK_ON_GROUND ):
		{
			if( trapItm.trap_type == TRAP_MECHANICAL )
			{
				TrapDisarm( trap );
			}
			else
			{
				DetonateTrap( trap );
			}
			break;
		}
		default:
		{
			if( trapItm.trap_type != TRAP_MECHANICAL )
			{
				DetonateTrap( trap );
				break;
			}
			return false;
		}
	}
	return true;
}

void RotateTrap( Item& trap )
{
	string vertHash = "";
	string horHash = "";
	
	switch( trap.GetProtoId() )
	{
		case( PID_IMPOVISED_TRAP_ACTIVE ):
			vertHash = "art/items/traps/tripwire_active_ns_itm.png";
			horHash = "art/items/traps/tripwire_active_we_itm.png";
			break;
		case( PID_IMPOVISED_TRAP_PLASMA_ACTIVE ):
			vertHash = "art/items/traps/tripwire_plasma_active_ns_itm.png";
			horHash = "art/items/traps/tripwire_plasma_active_we_itm.png";
			break;
		case( PID_IMPOVISED_TRAP_PULSE_ACTIVE ):
			vertHash = "art/items/traps/tripwire_pulse_active_ns_itm.png";
			horHash = "art/items/traps/tripwire_pulse_active_we_itm.png";
			break;
		default:
			return;
	}
	
	uint vertical = GetStrHash( vertHash );
	uint horizontal = GetStrHash( horHash );
	
	if( trap.PicMap != vertical )
	{
		trap.PicMap = vertical;
	}
	else
	{
		trap.PicMap = horizontal;
	}
	
	trap.Update();
}


void _TrapWalk( Item& trap, Critter& cr, bool entered, uint8 dir )
{
	TrapItem@ trapItm = GetTrapItem( trap );
	if( !valid( trapItm ) )
	{
		return;
	}
	
	if( cr.Stat[ ST_LOCOMOTION_TYPE ] == LOCOMOTION_FLY )
	{
		return;
	}
	
	cr.Wait( 0 );
	
	if( entered )
	{
		if( trapItm.trap_type == TRAP_MECHANICAL )
		{
			int hardness = trap.TRAP_HARDNESS;

			if( LuckCheck( cr ) )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SNARE_LUCKY );
				return;
			}
			
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_STEP_SNARE );
			Map@ map = cr.GetMap();
			
			bool isCritical = CritRoll( trap.TRAP_CRITICAL_CHANCE, cr, map, trap.HexX, trap.HexY );
			InjureCritter( cr, Random( trap.Proto.Weapon_DmgMin_0, trap.Proto.Weapon_DmgMax_0 ), trap.Proto.Weapon_DmgType_0, dir, trap.TRAP_OWNER, Random( 0, 1 ) == 0 ? HIT_LOCATION_LEFT_LEG : HIT_LOCATION_RIGHT_LEG, isCritical );
			
			if( hardness > 0 )
			{
				HookHoldAttack( cr, hardness );
			}
			
			TrapDisarm( trap );
		}
		else if( trapItm.trap_type == TRAP_TRIPWIWE )
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_STEP_TW );
			DetonateTrap( trap );			
		}			
	}
	else if( trapItm.trap_type == TRAP_MINE )
	{
		if( LuckCheck( cr ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MINE_LUCKY );
		}
		else
		{
			cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_MINE_KABOOM );
			DetonateTrap( trap );			
		}
	}
}

bool CheckTrapInstallPlace( Map& map, uint16 hexX, uint16 hexY )
{
	if( !map.IsHexPassed( hexX, hexY ) )
	{
		return false;
	}
	
	Item@[] items;
	map.GetItems( hexX, hexY, items );
	uint len = items.length();
	if( len > 0 )
	{
		return false;
	}
	
    Critter@[] critters;
    if( map.GetCrittersHex( hexX, hexY, 0, FIND_LIFE_AND_KO, critters ) > 0 )
	{
        return false;
	}
	
	return true;
}

void TryDisarm( Item& trap, Critter& cr )
{
	if( DisarmCheck( trap, cr ) )
	{
		TrapDisarm( trap );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TRAP_SUCCESS_DISARM );
	}
	else if( !LuckCheck( cr ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TRAP_FAILED_DISARM );
	}
	else
	{
		DetonateTrap( trap );
	}
}

void DetonateTrap( Item& trap )
{
	uint16 hexX = 0, hexY = 0;
	Map@ map = trap.GetMapPosition( hexX, hexY );
	Critter@ owner = GetCritter( trap.TRAP_OWNER );

	if( !valid( map ) )
	{
		return;
	}
	
	if( trap.CritSlot == SLOT_HAND1 )
	{
		@ owner = GetCritter( trap.CritId );
		if( !valid( owner ) )
		{
			return;
		}
		
		hexX = owner.HexX;
		hexY = owner.HexY;
	}
	
	if( trap.TRAP_HARDNESS != 0 || trap.CritSlot == SLOT_HAND1 )
	{
		uint[] vals = { hexX, hexY, map.Id, trap.GetProtoId(), valid( owner ) ? owner.Id : 0, 0 };
		CreateTimeEvent( __FullSecond + 1, "combat@e_DelayedExplosion", vals, true );
	} 
	else
	{
		TrapDisarm( trap );
	}
}

void TrapDisarm( Item& trap )
{
	uint16 tx = 0, ty = 0;
	Map@ map = trap.GetMapPosition( tx, ty );
	if( valid( map ) )
	{
		TrapItem@ trapItm = GetTrapItem( trap );
		if( valid( trapItm ) )
		{
			PlayGenericSound( map, trap.HexX, trap.HexY, trapItm.sound_off, 6 );
			
			Item@ disarmedTrap = map.AddItem( trap.HexX, trap.HexY, trapItm.pid, 1 );
			if( valid( disarmedTrap ) )
			{
				DeleteItem( trap );
			}
		}
	}
}

#endif // TRAP_MODULE