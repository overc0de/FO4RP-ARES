#ifndef WINDUP
#define WINDUP

#include "_utils.fos"
#include "windup_h.fos"
#include "combat_h.fos"

import void LookDataRefresh( Critter& cr ) from "main";

void ChangeWindup( Critter& cr, bool ignore_bussy )
{
	if( cr.IsPlayer() && !ignore_bussy && cr.IsBusy() )
	{
		return;
	}
	
	if( cr.Param[ CR_IS_WINDUPED ] == 0 && cr.Stat[ ST_CURRENT_AP ] < 0 )
	{
		return;
	}
	
	cr.Wait( 1000 );

	uint action_name;
	Item@ realWeapon = _CritGetItemHand( cr );
	if( !valid( realWeapon ) )
	{
		switch( cr.StatBase[ ST_BODY_TYPE ] ) 
		{
			case( BT_MEN ):
			case( BT_WOMEN ):
			case( BT_GHOUL ):
				action_name = STR_EMOTE_RAISES_FISTS;
				break;
			case( BT_CHILDREN ):
				action_name = STR_EMOTE_RAISES_FISTS2;
				break;
			case( BT_SUPER_MUTANT ):
				action_name = STR_EMOTE_RAISES_FISTS3;
				break;
			case( BT_LAVASH ):
			case( BT_BRAHMIN ):
				action_name = STR_EMOTE_RAISES_HORNS;
				break;
			case( BT_RADSCORPION ):
				action_name = STR_EMOTE_RAISES_STINGER;
				break;
			case( BT_RAT ):
			case( BT_DOG ):
				action_name = STR_EMOTE_GRINS;
				break;
			case( BT_FLOATER ):
			case( BT_PLANT ):
			case( BT_MILLEPEDE ):
				action_name = STR_EMOTE_RAISES_TO_HIGHT;
				break;
			case( BT_CENTAUR):
				action_name = STR_EMOTE_OPEN_JAWS;
				break;
			case( BT_ROBOT):
				action_name = STR_EMOTE_RAISES_MANIPILATORS;
				break;
			case( BT_MANTI):
			case( BT_DEATHCLAW ):
			case( BT_GECKO ):
				action_name = STR_EMOTE_RAISES_CLAWS;
				break;
			case( BT_ALIEN ):
				action_name = STR_EMOTE_RASES_TENTACLES;
				break;
			case( BT_SPIDER ):
			case( BT_GIANT_ANT ):
			case( BT_GIANT_BEETLE ):
				action_name = STR_EMOTE_OPENS_MANDIBLE;
				break;
			case( BT_BIG_BAD_BOSS ):
				action_name = STR_EMOTE_FRANKS_LOOK;
				break;
			case( BT_GIANT_WASP ):
				action_name = STR_EMOTE_EMITS_STINGER;
				break;
			case( BT_YAO ):
				action_name = STR_EMOTE_ROARS_LOUDLY;
				break;
			case( BT_SWAMP_LURKER ):
				action_name = STR_EMOTE_OPENS_PINCERS;
				break;
			case( BT_CROCS ):
				action_name = STR_EMOTE_EMITS_LOW_ROAR;
				break;
		}
	}
	
	ProtoItem@ weapon = valid( realWeapon ) ? GetProtoItem( realWeapon.GetProtoId() ) : null;
	
	Map@ map = cr.GetMap();
	if( valid( map ) && valid( realWeapon ) && weapon.Type == ITEM_TYPE_WEAPON )
	{
		int radius = 6;
		CritterMutual@[] players;
		int hx = cr.HexX, hy = cr.HexY;
		cr.GetMap().GetCrittersHex( hx, hy, radius, FIND_ALL | FIND_ONLY_PLAYERS, players );
		int[] values = { weapon.ProtoId, 5, radius };
		for( uint i = 0; i < players.length(); i++ )
		{
			CritterMutual@ player = players[i];
			if( valid( player ) )
			{
				player.RunClientScript( "fofmod@__PlayWeaponSound", cr.Id, hx, hy, "LAUGHTE1.mp3", values );
			}
		}
	}

	int skillNum = ( valid( weapon ) ? _WeaponSkill( weapon, 0 ) : ( valid( realWeapon ) ? SK_MELEE_WEAPONS : SK_UNARMED ) );
	uint8 weaponSubtype = ( skillNum == SK_SMALL_GUNS || skillNum == SK_MEDIUM_GUNS || skillNum == SK_BIG_GUNS ) ? WS_GUN : 
						( ( skillNum == SK_THROWING ) ? WS_THROWING : ( skillNum == SK_MELEE_WEAPONS ) ? WS_MELEE : WS_UNARMED );

	if( cr.Param[ CR_IS_WINDUPED ] != 0 )
	{
		cr.ParamBase[ CR_IS_WINDUPED ] = 0;
		if( cr.Anim2Life >= 120 || cr.Anim2Life <= 125 ) // _animation.fos defines for weapon windup
		{ 
			if( valid( realWeapon ) )
			{
				action_name = STR_EMOTE_LOWERS_LEX;
				if( weaponSubtype == WS_GUN )
				{
					uint[] values = { cr.Id };
					cr.SetAnims( COND_LIFE, 0, ANIM2_TURNOFF_WEAPON );
					CreateTimeEvent( AFTER( REAL_MS( 150 ) ),"e_gunWindDownVFX", values, true );
					cr.Wait( 150 );
				}
				else
				{
					cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
				}
			}
			else
			{
				action_name = STR_EMOTE_RELAXES;
				cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			}
		}
		else
		{
			return;
		}
	}
	else
	{
		uint APcost = 3000;
		cr.ParamBase[ CR_IS_WINDUPED ] = 1;
		cr.ParamBase[ CR_IS_RELAXING ] = 0;
		if( cr.GetTimeEvents( CTE_WINDUP, null, null, null ) == 0 )
		{
			cr.AddTimeEvent( "windup@cte_windup", 0, CTE_WINDUP, 0 );
		}
		uint8 weapon_Subtype = valid( realWeapon ) ? realWeapon.Proto.Item_Subtype : 0;
		
		if( valid( realWeapon ) )
		{
			action_name = STR_EMOTE_RAISES_LEX;
			if( realWeapon.GetType() == ITEM_TYPE_WEAPON )
			{
				APcost = valid( weapon ) ? weapon.Weapon_ApCost_0 * 100 : 0;
			}
		}
		
		cr.StatBase[ ST_CURRENT_AP ] -= APcost;
		int skin = cr.Stat[ ST_BASE_CRTYPE ];
		bool isSuperMutant = ( skin == CRTYPE_SUPERMUTE_NORMAL ) || ( skin == CRTYPE_SUPERMUTE_JACKET ) || ( skin == CRTYPE_SUPERMUTE_METAL || skin == CRTYPE_SUPERMUTE_METAL_BLACK ) || ( skin == CRTYPE_NIGHTKIN_NORMAL ) || ( skin == CRTYPE_NIGHTKIN_JACKET );
		bool isCoatguy = ( skin == CRTYPE_COAT_GUY || skin == CRTYPE_BLACK_COAT_GUY );
		if( weaponSubtype == WS_GUN )
		{
			uint[] values = { cr.Id };
			cr.SetAnims( COND_LIFE, 0, ANIM2_PREPARE_WEAPON );
			CreateTimeEvent( AFTER( REAL_MS( 150 ) ),"e_gunWindupVFX", values, true );
			cr.Wait( 150 );
		}//blades
		else if( weapon_Subtype == ITEM_SUBTYPE_WEAPON_MELEE_KNIFE || weapon_Subtype == ITEM_SUBTYPE_WEAPON_MELEE_LONG_KNIFE || weapon_Subtype == ITEM_SUBTYPE_WEAPON_GRENADE_KIFE )
		{
			if( skin == CRTYPE_BLACK_TRIBAL || isCoatguy || isSuperMutant )
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_UNARMED );
			}
			else
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_BLADE );
			}
		}//hammers
		else if( weapon_Subtype == ITEM_SUBTYPE_WEAPON_MELEE_HAMMER )
		{
			if( skin == CRTYPE_VAULT_F || skin == CRTYPE_BLACK_TRIBAL )
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_BLADE );
			}
			else if(  isCoatguy || isSuperMutant )
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_UNARMED );
			}
			else
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_HAMMER );
			}
		}//clubs
		else if( weapon_Subtype == ITEM_SUBTYPE_WEAPON_MELEE_CLUB )
		{
			if( ( skin == CRTYPE_DEFAULT_F && !valid( _CritGetItemArmor(cr) ) ) || skin == CRTYPE_VAULT_F || skin == 458 )
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_BLADE );
			}
			else if( skin == CRTYPE_DEFAULT_M && !valid( _CritGetItemArmor(cr) ) )
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_HAMMER );
			}
			else if( isCoatguy || isSuperMutant ) 
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_UNARMED );
			}
			else
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_BLUNT );
			}
		}//spears
		else if( weapon_Subtype == ITEM_SUBTYPE_WEAPON_MELEE_SPEAR )
		{
			if( skin == CRTYPE_VAULT_F || skin == CRTYPE_BLACK_TRIBAL )
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_BLADE );
			}
			else if( isCoatguy || isSuperMutant )
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_UNARMED );
			}
			else
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_SPEAR );
			}
		}//unarmed + non-weapons
		else
		{ 
			cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP_UNARMED );
		}
	}
	
	string desc;
	if( valid( realWeapon ) && valid( weapon ) )
	{
		if( realWeapon.ITEM_GM_LEXEM == PID_POPUP )
		{
			desc = getItemTextName( Item_GetLexems( realWeapon ) );
		}
		else
		{
			if( realWeapon.Info != 0 && realWeapon.ITEM_GM_LEXEM != 0 )
			{
				desc = itemName( realWeapon.ITEM_GM_LEXEM, null );
			}
			else
			{
				desc = itemName( weapon.ProtoId, null );
			}
		}

		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, action_name, "$proto" + desc );
	}
	else
	{
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, action_name );
	}

	string action = replaceText( GetTextMsgStr( action_name ), "@lex proto@", "[ " + desc + " ]" );
	SayLog( cr, crInfo( cr ) + " " + action );
}

uint e_gunWindupVFX( uint[]@ values )
{
	Critter@ cr = GetCritter( values[0] );
	if( valid( cr ) )
	{
		cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP );
		cr.Wait( 500 );
	}

	LookDataRefresh( cr );
	cr.RefreshVisible();
	return 0;
}

uint e_gunWindDownVFX( uint[]@ values )
{
	Critter@ cr = GetCritter( values[0] );
	if( valid( cr ) )
	{
		cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
		cr.Wait( 500 );
	}

	LookDataRefresh( cr );
	cr.RefreshVisible();
	return 0;
}

uint cte_windup( Critter& cr, int identifier, uint& rate )
{
	if( cr.Param[ CR_IS_WINDUPED ] == 0 )
	{
		return 0;
	}
	
	if( MovementState( cr ) > MOVE_STATE_STILL )
	{
		cr.ParamBase[ CR_IS_WINDUPED ] = 0;
		if( cr.Anim2Life >= 120 || cr.Anim2Life <= 125 ) // _animation.fos defines for weapon windup
		{
			Item@ realWeapon = _CritGetItemHand( cr );
			if( valid( realWeapon ) )
			{
				if( realWeapon.Proto.Item_Subtype >= ITEM_SUBTYPE_WEAPON_NORMAL_BEGIN && realWeapon.Proto.Item_Subtype <= ITEM_SUBTYPE_WEAPON_SONIC_END )
				{
					uint[] values = { cr.Id };
					cr.SetAnims( COND_LIFE, 0, ANIM2_TURNOFF_WEAPON );
					CreateTimeEvent( AFTER( REAL_MS( 150 ) ),"e_gunWindDownVFX", values, true );
					cr.Wait( 150 );
				}
				else
				{
					cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
				}
			}
			else
			{
				cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			}
		}
		
		return 0;
	}
	
	return REAL_MS( 500 );	
}

#endif //WINDUP