#ifndef EXPLODE
#define EXPLODE

#include "_utils.fos"
#include "explode_h.fos"
#include "combat_h.fos"
#include "effects_h.fos"
#include "firestarter_h.fos"

bool SetExplosives( Critter& cr, Item& item, int timer )
{
    if( !valid( item ) )
	{
        return false;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false;
	}
	
    uint16 pid = item.GetProtoId();
	
    if( timer < TIMER_MIN_VALUE )
	{
        timer = TIMER_MIN_VALUE;
	}
	
    if( timer > TIMER_MAX_VALUE )
	{
        timer = TIMER_MAX_VALUE;
	}

    if( pid == PID_DYNAMITE )
	{
        Item@ activateExpl = cr.AddItem( PID_ACTIVE_DYNAMITE, 1 );
        if( !valid( activateExpl ) )
		{
            return false;
		}
		
		_SubItem( item, 1 );
		
		activateExpl.TRAP_SKILL = cr.Skill[ SK_TRAPS ];
		activateExpl.TrapValue = cr.Skill[ SK_TRAPS ];
		activateExpl.TRAP_OWNER = cr.Id;
		activateExpl.TRAP_CRITICAL_CHANCE = cr.Stat[ ST_CRITICAL_CHANCE ];
        activateExpl.EXPLOSION_TIMEOUT = CreateTimeEvent( AFTER( REAL_SECOND( timer ) ), "explode@e_Explode", activateExpl.Id, true );
		
        if( cr.Timeout[ TO_REMOVE_FROM_GAME ] < timer + REAL_MINUTE( 5 ) )
		{
            cr.TimeoutBase[ TO_REMOVE_FROM_GAME ] = __FullSecond + timer + REAL_MINUTE( 5 );
		}
	}
	else if( pid == PID_TNT_PACK )
	{
		Item@ expl = cr.AddItem( PID_TNT_PACK_ACTIVE, 1 );
        if( !valid( expl ) )
		{
            return false;
		}
		
		_SubItem( item, 1 );
		
		expl.TRAP_SKILL = cr.Skill[ SK_TRAPS ];
		expl.TrapValue = cr.Skill[ SK_TRAPS ];
		expl.TRAP_CRITICAL_CHANCE = cr.Stat[ ST_CRITICAL_CHANCE ];
		
		int[] data = {0};
		cr.RunClientScript( "client_screen_numberpad@ShowScreen", expl.Id, 0, 0, "Input radio frequency", data );
		PlayGenericSound( map, cr.HexX, cr.HexY, "IB1P1XX1.mp3", 6 );
    }
	else if( pid == PID_TNT_PACK_ACTIVE && item.Accessory == ACCESSORY_CRITTER )
	{
		int[] data = {0};
		cr.RunClientScript( "client_screen_numberpad@ShowScreen", item.Id, 0, 0, "Input radio frequency", data );
	}
	else if( pid == PID_REMOTE_DETONATOR )
	{
		PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN2.mp3", 6 );
        Item@[] explosives;
		Item@ explosive = null;
		GetAllItems( PID_TNT_PACK_ACTIVE, explosives );
		for( uint i = 0, len = explosives.length(); i < len; i ++ )
		{
			@ explosive = explosives[i];
			if( valid( explosive ) )
			{
				if( explosive.TRAP_FREQUENCY == item.TRAP_FREQUENCY )
				{
					uint16 x = 0, y = 0;
					Map@ explMap = explosive.GetMapPosition( x, y );
					if( explMap.Id == map.Id )
					{
						uint[] vals = { explosive.Id };
						CreateTimeEvent( AFTER( REAL_MS( 0 ) ), "explode@e_Explode", vals, true );
					}
				}
			}
		}
		explosives.resize(0);
    }
	return true;
}

bool ExplosivesDisarm( Critter& cr, Item& item )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( item ) )
	{
		return false;
	}
	
	uint16 pid = item.GetProtoId();
	
	if( pid == PID_ACTIVE_DYNAMITE || pid == PID_TNT_PACK_ACTIVE )
	{
        if( DisarmCheck( item, cr ) )
		{
            if( pid == PID_ACTIVE_DYNAMITE )
			{
				EraseTimeEvent( item.EXPLOSION_TIMEOUT );
                cr.AddItem( PID_DYNAMITE, 1 );
			}
			else if( pid == PID_TNT_PACK_ACTIVE )
			{
                cr.AddItem( PID_TNT_PACK, 1 );
			}
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TRAP_SUCCESS_DISARM );
			_SubItem( item, item.GetCount() );
		}
		else if( LuckCheck( cr ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LOW_SKILL_TRAP_LUCKY );
			return true;
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TRAP_FAILED_DISARM );
            uint[] vals = { item.HexX, item.HexY, map.Id, item.GetProtoId(), item.TRAP_OWNER, 0 };
			CreateTimeEvent( AFTER( REAL_MS( 0 ) ), "combat@e_DelayedExplosion", vals, true );
        }
    }
	return true;
}

// Time event
uint e_Explode( uint[] @ values ) 
{
	Item@ expl = GetItem( values[0] );
	if( valid( expl ) )
	{
		uint16 hexX = 0, hexY = 0;
		
		Map@ map = expl.GetMapPosition( hexX, hexY );
		if( !valid( map ) )
		{
			return 0;
		}
		
		Critter@ crExpl = null;
		
		if( expl.Accessory == ACCESSORY_CRITTER )
		{
			@ crExpl = GetCritter( expl.CritId );
			crExpl.MoveItem( expl.Id, expl.GetCount(), SLOT_GROUND );
		}
		else if( expl.Accessory == ACCESSORY_CONTAINER )
		{
			Item@ container = GetItem( expl.ContainerId );
			if( valid( container ) )
			{
				if( container.Accessory == ACCESSORY_CRITTER )
				{
					@ crExpl = GetCritter( container.CritId );
					crExpl.MoveItem( container.Id, container.GetCount(), SLOT_GROUND );
				}
				else if( container.Accessory == ACCESSORY_CONTAINER )
				{
					Item@ container2 = GetItem( container.ContainerId );
					MoveItem( container2, container2.GetCount(), map, hexX, hexY );
					DropContainerItems( map, container2 );
				}

				MoveItem( expl, expl.GetCount(), map, hexX, hexY );
				DropContainerItems( map, container );
			}
		}

		uint[] vals = { hexX, hexY, map.Id, expl.GetProtoId(), expl.TRAP_OWNER, 0 };
		CreateTimeEvent( AFTER( REAL_MS( 0 ) ), "combat@e_DelayedExplosion", vals, true );
	}
    return 0;
}

//Generic explosion
void Explode( Item& item )
{
	uint[] vals = { item.Id };
	CreateTimeEvent( AFTER( REAL_MS( 0 ) ), "explode@e_Explode", vals, true );
}

void ExplodeEx( Map& map, uint16 hexX, uint16 hexY, uint16 effectPid, uint effectRadius, uint damage, uint damageType, uint damageRadius, uint ownerId ) // Export
{
    map.RunEffect( effectPid, hexX, hexY, effectRadius );
	
	string sound = "LAUGHTE1.mp3";
	int hearRadius = 50;
	
	switch( damageType )
	{
		case( DAMAGE_EXPLODE ): 		
			hearRadius = 140;
			sound = "Grenade_explode.wav";
			break;
		case( DAMAGE_FIRE ):
			hearRadius = 50;
			sound = "Fire_explode.mp3";
			break;
		case( DAMAGE_ELECTR ):
			hearRadius = 80;
			sound = "Pulse_explode.mp3";
			break;
		case( DAMAGE_PLASMA ): 	
			hearRadius = 100;
			sound = "Plasma_explode.wav";
			break;
		default: 						
			hearRadius = 160;
			sound = "Rocket_explode.wav";				
			break;
	}
	
	PlayGenericSound( map, hexX, hexY, sound, hearRadius );

    QuakeScreen( map );

    Critter@[] critters;
    if( map.GetCrittersHex( hexX, hexY, damageRadius, FIND_LIFE_AND_KO, critters ) == 0 )
	{
        return;
	}
	
    for( uint i = 0, j = critters.length(); i < j; i++ )
	{
        Critter@ cr = critters[ i ];
        uint dist = ::GetDistantion( hexX, hexY, cr.HexX, cr.HexY );
        int dir = ( dist == 0 ? ( cr.Dir + 3 ) % 6 : GetDirection( hexX, hexY, cr.HexX, cr.HexY ) );
        InjureCritter( cr, damage, damageType, dir, ownerId, HIT_LOCATION_NONE, false );
        if( ownerId != 0 )
		{
            cr.AddEnemyInStack( ownerId );
		}
	}
}

#endif //EXPLODE