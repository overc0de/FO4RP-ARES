// Author: Anuri
#ifndef SCAVENGING
#define SCAVENGING

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"
#include "entire_h.fos"
#include "combat_h.fos"
#include "repair_h.fos"
#include "speed_h.fos"

// LTP (long time process)
bool ltp_scavenging_inited = false;
void ltp_scavenging_init()
{
	LTPREG( LTP_SCAVENGING, process_scavenging )
	ltp_scavenging_inited = true;
}
//exported to main.fos - checks before start
bool PrepareScavenging( Critter& cr, Item@ tool, Item@ target ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( tool ) || !valid(target) )
	{
		return false;
	}
   	
	uint toolPid = tool.GetProtoId();
	if( ScavengingTools.find( toolPid ) == -1 )
	{
		return false;
	}
	
	uint targetPid = target.GetProtoId();
	if( targetPid != PID_JUNK_SALVAGE )
	{
		return false;
	}
	
	if( tool.CritSlot != SLOT_HAND1 ) 
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EQUIP_TOOL );
		return false;
	}

	if( _ItemIsBroken( tool ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOOL_BROKEN );
		_SubItem(tool, 1);
		return true;
	}

	if( IsTired( cr ) )
	{
		return false;
	}
	
	if( cr.IsDmgTwoArm() || cr.IsDmgTwoLeg() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_CANT_WORK );
		return false; 
	}
	
	if( tool.IsDeteriorable() )
	{
		uint det = GetDeteriorationProcent( tool );
		SetDeterioration( tool, det + 1 );	
	}

	start_scavenging( cr, tool, target );
	return true;
}

uint scavengingSkill( Critter& cr )
{
	return cr.Skill[ SK_SCAVENGING ] + uint( cr.Skill[ SK_OUTDOORSMAN ] * 0.5 );
}

bool start_scavenging( Critter& cr, Item& tool, Item& target )
{
	if(!ltp_scavenging_inited)
	{
		ltp_scavenging_init();
	}
	
	if( valid( tool ) && valid( target ) )
	{	
		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ ST_AGILITY ] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		uint object_dpa = scavengingSkill(cr) + ( cr.Stat[ ST_STRENGTH ] * 10 ) + OBJECT_DPA_BASE; 
		cr.ParamBase[ ST_LTP_SEQUENCE ] = uint( ceil( float( OBJECT_HP_BASE / ( CLAMP( object_dpa, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) ) );
		
		uint[] values = { cr.Id, tool.Id };
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ScavengingSound", values, true );
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );	
		StartProcess( cr, LTP_SCAVENGING, 0, tool.Id, target.Id, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		return true;
	}
	return false;
}

uint process_scavenging( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_SCAVENGING )

    Item@ tool = GetItem( param1 );
  	Item@ target = GetItem( param2 );
  	if( valid( tool ) && valid( target ) )
    {
      	param0++;

		if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
		{
			Profit( cr, tool, target );
			int skillNum = SK_SCAVENGING;
			Accident( cr, skillNum );
			SayLog( cr, crInfo( cr ) + " has salvaged a scavenging resource node." );
		}
		else
		{
			uint toolPid = tool.GetProtoId();
			switch( toolPid )
			{
				case( PID_SUPER_TOOL_KIT ):
				case( PID_MULTI_TOOL ):
					_CritAnimateUse( cr );
					break;
				default:
					_CritAnimateSwing( cr );
					break;
			}
			
			uint[] values = { cr.Id, tool.Id };
			CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ScavengingSound", values, true);
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
			
			// if( cr.IsInjured() )
			// {
				// uint damage = INJURED_HP_DAMAGE - cr.Stat[ ST_ENDURANCE ];
				// InjureCritter( cr, damage, DAMAGE_UNCALLED, cr.Dir, cr.Id, HIT_LOCATION_NONE, false );
			// }
			
			return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
		}
    }
	return 0;
}

uint e_ScavengingSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	string sound = _GetOneRandom( SkavengingSounds );
	PlayGenericSound( map, cr.HexX, cr.HexY, sound, 30 );
	return 0;
}

//Loot
bool Profit(  Critter& cr, Item@ tool, Item@ target )
{
	int amount = 0;
	uint toolMod = tool.GetProtoId();
	switch( toolMod )
	{	
		case( PID_IRON_PROD ):
		case( PID_SPADE ):
		case( PID_SHOVEL ):
			amount--;
			break;
		case( PID_SUPER_TOOL_KIT ):	
		case( PID_MULTI_TOOL ):
			amount++;
			break;
		default:
			amount = 0;
			break;
	}
	
	uint lootRoll = ( Random( 0, 2 ) + ( scavengingSkill(cr) / 50 ) );
	amount+= lootRoll;
	if( amount < 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOTHING_USEFULL );
	}
	else
	{
		int skillNum = SK_SCAVENGING;
		raiseSkill( cr, skillNum );
		
		int[] loot = {};
		if( Random( 0, 1 ) == 1 )
		{
			Item@ looted = cr.AddItem( PID_JUNK, 1 );
			loot.insertLast( looted.Proto.ProtoId );
		}

		for( int i = 0; i < amount; i++ )
		{
			ProtoItem@ junk = GetProtoItem( JunkLootList[ Random( 0, JunkLootList.length() - 1 ) ] );
			cr.AddItem( junk.ProtoId, 1 );
			loot.insertLast( junk.ProtoId );
		}
		
		if( loot.length() > 0 )
		{
			string inform;
			string desc;
			for( uint i = 0; i < loot.length(); i++ )
			{
				uint16 lootPid = loot[ i ];
				desc = "@msg item " + ( lootPid * 100 ) + "@";
				inform += "\n|0x3CF800  - " + "|0xFFFF00 " + desc + "|0x3CF800  -" + "|0xFFFF00  1" + "|0xFFFF00 ;";
			}
			inform[ inform.length() - 2 ] = '.';
			inform[ inform.length() - 1 ] = ' ';
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_COLLECTED, "$result " + inform );
			cr.StatBase[ST_EXPERIENCE] += 25;
		}
		
		ChangeCritterSpeed( cr );
		DeleteItem( target );	
	}
	
	return true;
}

//===============JUNK_SPAWNER_MECHANIC===============//
//Forced Spawn
void _ForceJunkInit(Critter& player, int param0, int param1, int param2)
{
	JunkInit();
}

void JunkInit()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapEvent( maps[i] );
	}
}

bool CheckMapEvent( Map& map )
{
    int n = JUNK_ENTIRE;
	if( map.CountEntire( n ) != 0 ) 
	{
		int[] values = {map.Id};
        map.SetData( MAP_JUNK_SPAWN_TE, CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_SpawnJunk", values, true ) );
        return true;
    } 
    return false;
}

uint e_SpawnJunk( int[] @ values )
{
	Map @ map = GetMap( values[ 0 ] );
	if( !valid( map ) )
	{
		return 0;
	}
	
	SpawnJunk( map );

	EraseTimeEvent( map.GetData( MAP_JUNK_SPAWN_TE ) );
	map.SetData( MAP_JUNK_SPAWN_TE, CreateTimeEvent( AFTER( DELAY_FOR_HARVESTABLE_LOOT_RESPAWN ), "e_SpawnJunk", values, true ) );
	return 0;
}

bool SpawnJunk( Map& map )
{
	int entireId = JUNK_ENTIRE;
	int entires = map.CountEntire( entireId );

	uint16 hx=0, hy=0;
	for( int j = 0; j < entires; j++ )
	{
		map.GetEntireCoords( entireId, j, hx, hy );
		if( map.IsHexPassed( hx, hy ) && Random( 0, 2 ) == 2 )
		{	
			Item@ JunkSalvage = map.AddItem( hx, hy, PID_JUNK_SALVAGE, 1 );
			ProtoItem@ proto = GetProtoItem(  JunkPileArtList [ Random( 0, JunkPileArtList.length() - 1 ) ] );
			JunkSalvage.PicMap = proto.PicMap;
			JunkSalvage.Update();
		}
	}
	return true;
}

#endif //SCAVENGING