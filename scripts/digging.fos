#ifndef DIGGING
#define DIGGING

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "firestarter_h.fos"
#include "combat_h.fos"

import uint8 checkSand( Map& map, uint16 tx, uint16 ty ) from "qmap_sand";

void TryGetSand( Critter& cr, Item& shovel, int hexX, int hexY ) 
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	if( GetDistantion( cr.HexX, cr.HexY, hexX, hexY ) > 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DIG_CLOSER );
		return;
	}
	
	uint8 sand_flags = 0; 	
	sand_flags = checkSand( map, H2T( hexX ), H2T( hexY ) );
	
	if( sand_flags == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_SAND_FOUND );
		return;
	}
	
	PrepareDigging( cr, shovel );
}

bool ltp_inited = false;
void ltp_init()
{
	LTPREG( LTP_DIGGING, process_digging )
	ltp_inited = true;
}

bool PrepareDigging( Critter& cr, Item@ tool ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( tool ) )
	{
		return false;
	}

   	uint toolPid = tool.GetProtoId();
	if( toolPid != PID_SHOVEL && toolPid != PID_SPADE )
	{
		return false;
	}

	if( tool.CritSlot != SLOT_HAND1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EQUIP_TOOL );
		return false;
	}

	if( IsTired( cr ) )
	{
		return false;
	}
	
	if( cr.IsDmgTwoArm() || cr.IsDmgTwoLeg() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_CANT_WORK );
		return false; 
	}
	
	start_digging( cr, tool );
	return true;
}

bool start_digging( Critter& cr, Item& tool )
{
	if( !ltp_inited )
	{
		ltp_init();
	}
	
	if( valid( tool ) )
	{	
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		uint digging_rage = cr.Skill[ SK_OUTDOORSMAN ] + ( cr.Stat[ ST_STRENGTH ] * 10 ) + OBJECT_DPA_BASE; 
		cr.ParamBase[ ST_LTP_SEQUENCE ] = uint( ceil( float( ( OBJECT_HP_BASE ) / ( CLAMP( digging_rage, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) ) );
		
		uint[] values = { cr.Id, tool.Id };
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_diggingSound", values, false);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);	
		_CritAnimateSwing(cr);
		StartProcess( cr, LTP_DIGGING, 0, tool.Id, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
		return true;
	}
	return false;
}

uint process_digging( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_DIGGING )

    Item@ tool = GetItem( param1 );
  	if( valid( tool ) )
    {
      	param0++;
		
		if( param0 > cr.ParamBase[ ST_LTP_SEQUENCE ] )
		{
			uint16 lootPid = PID_SAND;
			uint amount = 1;
			
			if( cr.Skill[ SK_OUTDOORSMAN ] > 50 )
			{
				uint len = cr.Skill[ SK_OUTDOORSMAN ] / 50;
				for( uint i = 0; i < len; i++ )
				{
					if( Random( 1, 100 ) > 70 )
					{
						amount++;
					}
				}				
			}
			
			cr.AddItem( lootPid, amount );
			
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_GATHERED, "$proto@msg item " + ( lootPid * 100 ) + "@$amount" + amount );
		}
		else
		{
			_CritAnimateSwing(cr);
			uint[] values = { cr.Id };
			CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_diggingSound", values, false );
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );
			
			// if( cr.IsInjured() )
			// {
				// uint damage = INJURED_HP_DAMAGE - cr.Stat[ ST_ENDURANCE ];
				// InjureCritter( cr, damage, DAMAGE_UNCALLED, cr.Dir, cr.Id, HIT_LOCATION_NONE, false );
			// }
			
			return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
		}
    }
	return 0;
}

bool CheckRemainsRemoval( Critter& cr, Item@ targetItem )
{
	Map@ map = cr.GetMap();
	PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( PickaxeSounds ), 30 );
	
	if( valid( targetItem ) )
	{
		uint16 pid = targetItem.GetProtoId();
		if( Ashes.find( targetItem.GetProtoId() ) != -1 )
		{
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_REMOVE_ASH );
			DeleteItem( targetItem );
		}
		else if( pid >= PID_OLD_BLOOD_BONES_1 && targetItem.GetProtoId() <= PID_OLD_BLOOD_BONES_3 )
		{
			
			cr.Animate( 0, ANIM2_PICKUP, null, false, true );
			targetItem.Val0 += Random( 1, 3 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REMOVE_SOME_REMAINS );
			
			if( targetItem.Val0 > 10 )
			{
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_REMOVE_REMAINS );
				DeleteItem( targetItem );
			}
		}
		else if( pid == PID_VAULT_DWELLER_BONES )
		{
			cr.Animate( 0, ANIM2_PICKUP, null, false, true );
			targetItem.Val0 += Random( 1, 3 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REMOVE_SOME_REMAINS );
			
			if( targetItem.Val0 > 10 )
			{
				Item@ skeleton = cr.AddItem( PID_BONES, 1 );
				skeleton.Val0 = targetItem.Val0;
				skeleton.Val1 = targetItem.Val1;
				skeleton.Val2 = targetItem.Val2;
				skeleton.Val3 = targetItem.Val3;
				skeleton.Val4 = targetItem.Val4;
				skeleton.Val5 = targetItem.Val5;
				skeleton.Val6 = targetItem.Val6;
				skeleton.Val7 = targetItem.Val7;
				skeleton.Val8 = targetItem.Val8;
				skeleton.Val9 = targetItem.Val9;
				
				string @itemLex = Item_GetLexems( targetItem );
				if( valid( itemLex ) ) 
				{
					setLexDesc( skeleton, itemLex );
					setOverridenDesc( skeleton, true );
				}
				
				DropContainerItems( map, targetItem );
				DeleteItem( targetItem );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLECT_REMAINS );
			}
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DID_NOTHING );
			return false;
		}
		return true;
	}
	return false;
}

uint e_diggingSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( PickaxeSounds ), 30 );
	return 0;
}

#endif //DIGGING