#ifndef MAIN_PLANES
#define MAIN_PLANES

#include "_utils.fos"
#include "_npc_pids.fos"
#include "npc_ai.fos"
#include "linetracer_h.fos"
#include "npc_planes_h.fos"
#include "repair_h.fos"
#include "lockers_h.fos"
#include "combat_h.fos"
#include "hitchance_h.fos"
#include "speed_h.fos"

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on some plane added.
// Return true to allow plane, false to disallow.
// REASON_GO_HOME
// REASON_FOUND_IN_ENEMY_STACK   someCr as Enemy
// REASON_FROM_DIALOG            someCr as Player
// REASON_FROM_SCRIPT
// REASON_RUN_AWAY
bool npc_plane_begin( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    // Log("npc_plane_begin "+reason);
    return true;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on some plane added.
// Return true to erase plane, false to wait (set this plane to next priority of planes sequence).
// REASON_SUCCESS
// REASON_HEX_TOO_FAR
// REASON_HEX_BUSY
// REASON_HEX_BUSY_RING
// REASON_DEADLOCK
// REASON_TRACE_FAIL
// REASON_POSITION_NOT_FOUND
// REASON_FIND_PATH_ERROR
// REASON_CANT_WALK
// REASON_TARGET_DISAPPEARED     someCr as Enemy
// REASON_USE_ITEM_NOT_FOUND
// REASON_GAG_CRITTER            someCr as Enemy
// REASON_GAG_ITEM               someItem as Item
// REASON_NO_UNARMED

bool npc_plane_end( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	if( plane.Type == AI_PLANE_ATTACK && npc.Param[ CR_AUTO_ROUNDS_FIRED ] > 0 )
	{
		//Log( "plane end!" );
		npc.ParamBase[ CR_AUTO_ROUNDS_FIRED ] = 0;
	}
		
	// Log("npc_plane_end "+reason + "npcId" + npc.Id);	
	if( reason == REASON_CANT_WALK && npc.IsNoPlanes() )
	{
        npc.Wait( Random( 1000, 2000 ) );
    }
	else if( reason == REASON_HEX_BUSY || reason == REASON_HEX_BUSY_RING || reason == REASON_POSITION_NOT_FOUND )
	{
        npc.Wait( Random( 1000, 2000 ) );
    }
	else if( reason == REASON_FIND_PATH_ERROR || reason == REASON_HEX_TOO_FAR )
	{
        npc.Wait( 20000 );
    }
	else if( reason == REASON_GAG_CRITTER )
	{
        if( valid( someCr ) && someCr.IsPlayer() && int(someCr.Id) != npc.Merc[ MERC_MASTER_ID ] )
		{
			if( npc.Merc[ MERC_MASTER_ID ] != 0 )
			{
				Critter@ owner = GetCritter( npc.Merc[ MERC_MASTER_ID ] );
				if( valid( owner ) ) 
				{
					npc.Wait( Random( 1000, 2000 ) );
					return false;
				}
			}
            NpcPlane@ child = CreatePlane();
            child.Type = AI_PLANE_ATTACK;
            child.Priority = 0;
            child.Attack_TargId = someCr.Id;
            child.Attack_MinHp = __DeadHitPoints;
            child.Attack_IsGag = true;
            child.Attack_GagHexX = someCr.HexX;
            child.Attack_GagHexY = someCr.HexY;
            child.Attack_LastHexX = someCr.HexX;
            child.Attack_LastHexY = someCr.HexY;
            child.Run = plane.Run;
            plane.SetChild( child );
		}
		else
		{
            npc.Wait( Random( 1000, 2000 ) ); // Wait 1-2 second
        }
        return false;                         // Cancel deleting
    
	}
	else if( reason == REASON_GAG_ITEM )
	{
        if( valid( someItem ) )
		{
            if( someItem.GetType() == ITEM_TYPE_DOOR && !FLAG( someItem.LockerCondition, LOCKER_ISOPEN ) && AI_CAN_OPEN_DOORS( npc.Stat[ ST_AI_ID ] ) && IsKeyAviable( npc, someItem.LockerId ) )
			{
                NpcPlane@ child = CreatePlane();
                child.Type = AI_PLANE_PICK;
                child.Priority = 0;
                child.Pick_HexX = someItem.HexX;
                child.Pick_HexY = someItem.HexY;
                child.Pick_Pid = someItem.GetProtoId();
                child.Pick_UseItemId = GetKeyId( npc, someItem.LockerId );
                child.Pick_ToOpen = true;
                child.Run = plane.Run;
                plane.SetChild( child );
                return false;                 // Cancel deleting
			}
            /* WIP need to find a way to animate critter without dropping plane stack */
            else if( someItem.Proto.Material == MATERIAL_WOOD && someItem.Proto.Item_Subtype == ITEM_SUBTYPE_FURNITURE )
			{
                NpcPlane@ child = CreatePlane();
                child.Type = AI_PLANE_PICK;
                child.Priority = 0;
                child.Identifier = 228;
                child.Pick_HexX = someItem.HexX;
                child.Pick_HexY = someItem.HexY;
                child.Pick_Pid = someItem.GetProtoId();
                child.Run = plane.Run;
                plane.SetChild( child );

                npc.Animate( 0, ANIM2_PUNCH_RIGHT, null, true, true );

                if( isContainer( someItem ) )
                {
                    DropContainerItems( npc.GetMap(), someItem);
                }
                DeleteItem( someItem );
                
                return false;
            }	
			else if( someItem.GetType() != ITEM_TYPE_DOOR )
			{
                NpcPlane@ child = CreatePlane();
                child.Type = AI_PLANE_PICK;
                child.Priority = 0;
                child.Pick_HexX = someItem.HexX;
                child.Pick_HexY = someItem.HexY;
                child.Pick_Pid = someItem.GetProtoId();
                child.Run = plane.Run;
                plane.SetChild( child );
                return false;                 // Cancel deleting
            }	
        }
    }
	else if( reason == REASON_RUN_AWAY && npc.IsCanWalk() )
	{
		
        Map@ map = npc.GetMap();
        Critter@ cr = GetCritter( plane.Attack_TargId );
		
        if( valid( map ) && valid( cr ) )
		{
            int    awayDir = GetDirection( cr.HexX, cr.HexY, npc.HexX, npc.HexY );
            uint   awayDist = Random( 30, 50 );      // Todo: resolve correct distantion
            uint16 baseHx = npc.HexX;
            uint16 baseHy = npc.HexY;
            map.MoveHexByDir( baseHx, baseHy, awayDir, 1 );

            float angle = 0.0f;
            uint  reverse = Random( 0, 1 );
            for( uint i = 0; i < 5; i++ )
			{
                uint16 hx = baseHx, hy = baseHy;
                RustyGetHexCoord( map, npc.HexX, npc.HexY, hx, hy, angle, awayDist );
                if( GetDistantion( npc.HexX, npc.HexY, hx, hy ) > 1 )
				{
                    AddWalkPlane( npc, 100, hx, hy, 6, true, 0 );
                    break;
                }
                angle += float(i + 1) * 45.0f * ( ( i % 2 ) == reverse ? 1.0f : -1.0f );
            }
            AI_TrySayCombatText( npc, COMBAT_TEXT_RUN_AWAY );
        }
    }
	else if( reason == REASON_NO_UNARMED )
	{
        // Repair first broken weapon
        Item@[] items;
        uint count = npc.GetItemsByType( ITEM_TYPE_WEAPON, items );
        for( uint i = 0; i < count; i++ )
		{
            Item@ item = items[ i ];
            if( _ItemIsBroken( item ) )
			{
                SetDeterioration( item, 0 );
                break;
            }
        }
        npc.Wait( 10000 );
    }
	
    return true;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Called on some plane runs, to manuality manage some steps.

bool npc_plane_run( Critter& npc, NpcPlane& plane, int reason, uint& r0, uint& r1, uint& r2 )
{
    //Log("npc_plane_run "+reason);
	int npc_AI = npc.Stat[ ST_AI_ID ];
    if( reason == REASON_ATTACK_WEAPON )
	//  In: r0 target id, r1 0, r2 0
	//  Out: r0 weapon id, r1 use index, r2 proto id of unarmed attack (if r0==0)
	{
        // Special weapons
        uint16 npcPid = npc.GetProtoId();
        if( npcPid == NPC_PID_FIRE_GECKO || npcPid == NPC_PID_FIRE_GECKO_ALPHA || npcPid ==  NPC_PID_FIRE_GECKO_SP )
		{
            Item@ weap = npc.GetItem( PID_FIRE_GECKO_FLAME_WEAPON, -1 );
            if( valid( weap ) && weap.AmmoCount > 0 )
			{
                r0 = weap.Id;
                r1 = 0;
                return true;
            }
        }
		else if( npc.StatBase[ ST_BODY_TYPE ] == BT_PLANT )
		{
            Critter@ target = GetCritter( r0 );

			Item@ weap = npc.GetItem( PID_PLANT_SPIKE, -1 );
			if( valid( weap ) )
			{
				r0 = weap.Id;
				r1 = GetCrittersDistantion( npc, target ) > 1 ? 0 : 1;
				return true;
			}
        }

        // Default weapons
        r0 = 0;       // Use unarmed by default
        r1 = 0;
        r2 = ( Random( 0, 3 ) == 0 ? 1000 : 1020 );

        // Damaged two arms
        if( npc.IsDmgTwoArm() )
		{
            return true;
		}
		
        // No use weapon
        int bestWeapon = AI_BEST_WEAPON( npc_AI );
        if( bestWeapon == BW_Never )
		{
            return true;
		}
		
        // Get last battle weapon
        if( npc.Stat[ ST_LAST_WEAPON_ID ] == -1 )   // Previous seek not give result
		{
            r0 = 0;
            return true;
        }

        r0 = npc.Stat[ ST_LAST_WEAPON_ID ];
        r1 = npc.Stat[ ST_LAST_WEAPON_USE ];
        Item@ weapon = null;
        if( r0 != 0 )
		{
            @weapon = npc.GetItemById( uint( r0 ) );
        }
		
		if( valid( weapon ) && CheckBattleWeapon( npc, weapon ) )
		{
            return true;
		}
		
        // Find new battle weapon
        npc.StatBase[ ST_LAST_WEAPON_ID ] = -1;
        npc.StatBase[ ST_LAST_WEAPON_USE ] = 0;
        r0 = 0;
        r1 = 0;

        // Sort skills
        int[] skillsNum = { SK_SMALL_GUNS, SK_MEDIUM_GUNS, SK_BIG_GUNS, SK_UNARMED, SK_MELEE_WEAPONS, SK_THROWING };
        uint skillsCount = skillsNum.length();
        SkillsSort( npc, skillsNum, 0, skillsCount );

        // Advanced sort
        switch( bestWeapon )
        {
			case( BW_NoPref ):
				break;
			case( BW_Random ):
			{
				for( uint i = 0; i < skillsCount; i++ )
				{
					int i0 = Random( 0, skillsCount - 1 );
					int i1 = Random( 0, skillsCount - 1 );
					if( i0 != i1 )
					{
						int tmp = skillsNum[ i0 ];
						skillsNum[ i0 ] = skillsNum[ i1 ];
						skillsNum[ i1 ] = tmp;
					}
				}
				break;
			}
			case( BW_Unarmed ):
				SkillToBegin( skillsNum, SK_UNARMED );
				break;
			case( BW_RangedOvMelee ):
				SkillToBegin( skillsNum, SK_UNARMED );			// 5
				SkillToBegin( skillsNum, SK_MELEE_WEAPONS );	// 4
				SkillToBegin( skillsNum, SK_THROWING );			// 3
				SkillToBegin( skillsNum, SK_BIG_GUNS );			// 2
				SkillToBegin( skillsNum, SK_MEDIUM_GUNS );		// 1
				SkillToBegin( skillsNum, SK_SMALL_GUNS );		// 0
				SkillsSort( npc, skillsNum, 0, 4 );				// Sort 0, 1, 2, 3
				SkillsSort( npc, skillsNum, 4, 2 );				// Sort 4, 5
				break;
			case( BW_MeleeOvRanged ):
				SkillToBegin( skillsNum, SK_THROWING );			// 5
				SkillToBegin( skillsNum, SK_BIG_GUNS );			// 4
				SkillToBegin( skillsNum, SK_MEDIUM_GUNS );		// 3
				SkillToBegin( skillsNum, SK_SMALL_GUNS );		// 2
				SkillToBegin( skillsNum, SK_UNARMED );			// 1
				SkillToBegin( skillsNum, SK_MELEE_WEAPONS );	// 0
				SkillsSort( npc, skillsNum, 0, 2 );				// Sort 0, 1
				SkillsSort( npc, skillsNum, 2, 4 );				// Sort 2, 3, 4, 5
				break;
			case( BW_UnarmOvThrown ):
				SkillToBegin( skillsNum, SK_THROWING );			// 1
				SkillToBegin( skillsNum, SK_UNARMED );			// 0
				break;
			default:
				break;
        }

        // Get all weapons and check it
        Item@[] allWeapons;
        npc.GetItemsByType( ITEM_TYPE_WEAPON, allWeapons );
        for( uint i = 0, j = allWeapons.length(); i < j; i++ )
		{
            if( !CheckBattleWeapon( npc, allWeapons[ i ] ) )
			{
                @allWeapons[ i ] = null;
			}
		}
        // Choose one weapon
        for( uint i = 0; i < skillsCount; i++ )
		{
            int skill = skillsNum[ i ];
            for( uint k = 0, l = allWeapons.length(); k < l; k++ )
			{
                @weapon = allWeapons[ k ];
                if( !valid( weapon ) )
				{
                    continue;
				}
				
                for( int u = 0; u < 3; u++ )
				{
                    if( ( u == 0 && !_WeaponIsPrimaryAviable( weapon.Proto ) ) || ( u == 1 && !_WeaponIsSecondaryAviable( weapon.Proto ) ) || ( u == 2 && !_WeaponIsThirdAviable( weapon.Proto ) ) )
					{
                        continue;
					}
					
                    if( _WeaponSkill( weapon.Proto, u ) == skill )
					{
                        npc.StatBase[ ST_LAST_WEAPON_ID ] = weapon.Id;
                        npc.StatBase[ ST_LAST_WEAPON_USE ] = u;
                        r0 = weapon.Id;
                        r1 = u;
                        return true; // Done, weapon found
                    }
                }
            }
        }
        // Not found, hands used
        return true;
    }
	
	else if( reason == REASON_ATTACK_DISTANTION )
	//  In: r0 target id, r1 0, r2 0
	//  Out: r0 best dist, r1 min dist, r2 max dist (if == 0 than run away)
	{
        Critter@ target = GetCritter( r0 );
        uint8 mode = 0;
        ProtoItem@ weapon = npc.GetSlotProto( SLOT_HAND1, mode );
        int use = _WeaponModeUse( mode );
        int ap = _WeaponApCost( weapon, use );
		int skillNum = _WeaponSkill( weapon, use );
        ProtoItem@ ammo = ( weapon.Weapon_MaxAmmoCount > 0 && weapon.Weapon_Caliber != 0 ? GetProtoItem( _CritGetItemHand( npc ).AmmoPid ) : null );
		bool validAmmo = valid( ammo );
        int optimalDist = _WeaponMaxDist( weapon, use );
		int wpnMaxDist = optimalDist;

		if( skillNum == SK_SMALL_GUNS || skillNum == SK_MEDIUM_GUNS || skillNum == SK_BIG_GUNS )
		{
			wpnMaxDist = wpnMaxDist * 150 / 100;
		}
		else if( skillNum == SK_THROWING )
		{
			wpnMaxDist = MIN( wpnMaxDist, 3 * MIN( int( 10 ), npc.Stat[ ST_STRENGTH ] ) );
		}

		int dist = GetDistantion( npc.HexX, npc.HexY, target.HexX, target.HexY );
        if( !npc.IsCanWalk() )
		{
            if( wpnMaxDist < dist )
			{
                dist = wpnMaxDist;
			}
			
            r0 = dist;
			r1 = dist;
			r2 = dist;
			
            return true;
        }

		int toHit = to_hit( npc, target, weapon, mode, ammo, 0, 0, false );
		int ai_min = AI_MIN_TO_HIT( npc_AI );
		
        // non-ranged weapons:
        if( skillNum == SK_UNARMED || skillNum == SK_MELEE_WEAPONS )
		{
            if( toHit < ai_min )
			{
                r0 = 0;
                r1 = 0;
                r2 = 0;
            }
			else
			{
                r0 = optimalDist;
                r1 = 0;
                r2 = wpnMaxDist;
            }
			
            return true;
        }
		else
		{
			if( skillNum == SK_THROWING )
			{
                uint dmgType = _WeaponDmgType( weapon, use );

                if( weapon.Blast_Radius > 0 )
				{
                    r1 = weapon.Blast_Radius;
				}
            }
			else if( validAmmo )
			{
                if( ammo.Blast_Radius > 0 )
				{
                    r1 = ammo.Blast_Radius;
				}
            }

            if( int( r1 ) >= dist )
			{
                r1 = 0;
                r0 = 0;
                r2 = 0;
                return true;
            }

            if( toHit < ai_min )
			{
				r1 = 3;
				r0 = 0;
				r2 = optimalDist;
			}
			else if( toHit < 50 )
			{
				r0 = optimalDist - 10;
				r2 = optimalDist;
            }
			else
			{
				r0 = optimalDist;
				r2 = dist;
			}

            return true;
        }
    }
	else if( reason == REASON_ATTACK_USE_AIM )
	//  In: r0 target id, r1 0, r2 0
	//  Out: r0 use, r1 aim, r2 disable attack and wait this time (in ms)
	{
		Critter@ target = GetCritter( r0 );
		uint8 mode = 0;
        ProtoItem@ weapon = npc.GetSlotProto( SLOT_HAND1, mode );
		ProtoItem@ ammo = ( weapon.Weapon_MaxAmmoCount > 0 && weapon.Weapon_Caliber != 0 ? GetProtoItem( _CritGetItemHand( npc ).AmmoPid ) : null );
        int use = _WeaponModeUse( mode );
		
		if( npc.Param[ CR_AUTO_ROUNDS_FIRED ] == 0 )
		{
			int needAp = attack_ap( npc, weapon, use );
		//	Log( "needAP " + needAp + " Remaining AP " + npc.Stat[ ST_CURRENT_AP ] );
			if( npc.Stat[ ST_CURRENT_AP ] < needAp )
			{
				needAp -= npc.Stat[ ST_CURRENT_AP ];
				//Log( "Missing AP " + needAp );
				if( needAp > 0 )
				{
					r2 = needAp * npc.Stat[ ST_APREGEN ] / npc.Stat[ ST_CURRENT_AP ];
				//	Log( " r2 " + r2 ); 
				}
			}
		}
		
		if( weapon.Weapon_Anim2_0 == ANIM2_AUTO )
		{
			r1 = HIT_LOCATION_NONE;
			//Log( " npc.Param[ CR_AUTO_ROUNDS_FIRED ] "  + npc.Param[ CR_AUTO_ROUNDS_FIRED ] );
			if( npc.Param[ CR_AUTO_ROUNDS_FIRED ] >= 10 )
			{
				//Log( " npc.Param[ CR_AUTO_ROUNDS_FIRED ] >= 10 " );
				npc.ParamBase[ CR_AUTO_ROUNDS_FIRED ] = 0;
				r2 = _GetProtoWindupTime( weapon );
			}
		}
		else if( _WeaponRound( weapon, use ) > 1 && ValidateBurst( npc, target, weapon, ammo, use ) )
		{
			r1 = HIT_LOCATION_NONE;
		}
		else if( _WeaponIsSecondaryAviable( weapon ) && weapon.Weapon_Anim2_1 == ANIM2_BURST && ValidateBurst( npc, target, weapon, ammo, use ) )
		{
			r0 = 1;
			r1 = HIT_LOCATION_NONE;
		}
		else
		{
			int toHit = to_hit( npc, target, weapon, use, ammo, 0, 0, false );
			r1 = ChooseAim( npc, target, toHit );
		}

        return true;
    }
	
    return false;
}

int ChooseAim( Critter& npc, Critter& target, int toHit )
{
	int chance = AI_CALLED_FREQ( npc.Stat[ ST_AI_ID ] );
	int roll = Random( 1, 95 );
	if( roll > chance )
	{
		return HIT_LOCATION_NONE;
	}
	
	if( toHit < 85 )
	{
        return HIT_LOCATION_TORSO;
	}
	
	return Random( HIT_LOCATION_HEAD, HIT_LOCATION_GROIN );
}

class CTraceFirstCritter : ITraceContext
{
    Critter@ Cr;
    uint     Mindist;
    uint16   Gx;
    uint16   Gy;
    CTraceFirstCritter( uint16 gx, uint16 gy, uint16 mindist )
    {
        this.Gx = gx;
        this.Gy = gy;
        @this.Cr = null;
        this.Mindist = mindist;
    }
	
    bool Exec( Map& map, uint16 hx, uint16 hy )
    {
        if( !map.IsHexRaked( hx, hy ) )
		{
            return true;
        }
		
		@Cr = map.GetCritter( hx, hy );
        return valid( Cr ) && Cr.Cond == COND_LIFE && GetDistantion( Gx, Gy, Cr.HexX, Cr.HexY ) >= Mindist;
    }
}

Critter@ TraceFirstCritter( uint16 hx, uint16 hy, uint16 tx, uint16 ty, Map& map, int dist, uint16 gx, uint16 gy, uint mindist )
{
    CTraceFirstCritter Tracer( gx, gy, mindist );
    LineTracerHex( hx, hy, tx, ty, map, dist, Tracer );
    return Tracer.Cr;
}

bool IsCurrentEnemy( Critter& npc, uint targetId )
{
    if( npc.CheckEnemyInStack( targetId ) )
	{
		return true;
	}
	
    array< NpcPlane@ > plans;
    npc.GetPlanes( plans );
    for( uint i = 0, j = plans.length(); i < j; i++ )
	{
        if( plans[ i ].Type == AI_PLANE_ATTACK && plans[ i ].Attack_TargId == targetId )
		{
			return true;
		}
	}
	
    return false;
}

bool ValidateBurst( Critter& npc, Critter& target, ProtoItem@ weapon, ProtoItem@ ammo, uint mode )
{
	if( to_hit( npc, target, weapon, mode, ammo, 0, 0, false ) < 95 )
	{
		return false;
	}
	
	if( Random( 0, 2 ) == 0 ) // force normal shot, for a little diversity
	{
		return false;
	}     
	
	Map@ map = npc.GetMap();
    uint maxDist = _WeaponMaxDist( weapon, mode );
	uint16 hx = npc.HexX;
    uint16 hy = npc.HexY;
    uint16 tx = target.HexX;
    uint16 ty = target.HexY;
    Critter@ blocker = TraceFirstCritter( hx, hy, tx, ty, map, maxDist, hx, hy, 0 );
	
    if( valid( blocker ) && !IsCurrentEnemy( npc, blocker.Id ) )
	{
		return false;
	}

    uint16 sx = hx;
    uint16 sy = hy;
    uint16 ex = tx;
    uint16 ey = hy;
    uint8  dir = GetOffsetDir( hx, hy, tx, ty, 2.0f );
    map.MoveHexByDir( sx, sy, dir, 1 );
    map.MoveHexByDir( ex, ey, dir, 1 );
    @blocker = TraceFirstCritter( sx, sy, ex, ey, map, maxDist, hx, hy, 3 );
    if( valid( blocker ) && !IsCurrentEnemy( npc, blocker.Id ) )
    {
        return false;
    }

    sx = hx;
    sy = hy;
    ex = tx;
    ey = hy;
    dir = GetOffsetDir( hx, hy, tx, ty, -2.0f );
    map.MoveHexByDir( sx, sy, dir, 1 );
    map.MoveHexByDir( ex, ey, dir, 1 );
    @blocker = TraceFirstCritter( sx, sy, ex, ey, map, maxDist, hx, hy, 3 );
    if( valid( blocker ) && !IsCurrentEnemy( npc, blocker.Id ) )
    {
        return false;
    }

	return true;
}

void SkillsSort( Critter& npc, int[]& skills, uint first, uint count )
{
    for( uint i = first, j = first + count; i < j; i++ )
	{
        uint max = i;
        for( int k = i + 1, l = first + count; k < l; k++ )
		{
            if( npc.Skill[ skills[ k ] ] > npc.Skill[ skills[ max ] ] )
			{
                max = k;
			}
        }
		
        if( max != i )
		{
            int tmp = skills[ max ];
            skills[ max ] = skills[ i ];
            skills[ i ] = tmp;
        }
    }
}

void SkillToBegin( int[]& skills, int skill )
{
    for( uint i = 1, j = skills.length(); i < j; i++ )
	{
        if( skills[ i ] == skill )
		{
            for( uint k = i; k > 0; k-- )
			{
                skills[ k ] = skills[ k - 1 ];
			}
            skills[ 0 ] = skill;
            break;
        }
    }
}

bool CheckBattleWeapon( Critter& npc, Item& weapon )
{
    if( weapon.GetType() != ITEM_TYPE_WEAPON )
	{
		return false;
	}
	
    if( !npc.IsAnim1( weapon.Proto.Weapon_Anim1 ) )
	{
		return false;
	}
	
    if( _ItemIsBroken( weapon ) )
	{
		return false;
	}
	
    if( FLAG( weapon.Flags, ITEM_TWO_HANDS ) && ( npc.Damage[ DAMAGE_LEFT_ARM ] != 0 || npc.Damage[ DAMAGE_RIGHT_ARM ] != 0 ) )
	{
		return false;
	}
	
	if( npc.Mode[ MODE_UNLIMITED_AMMO ] == 0 && weapon.Proto.Weapon_MaxAmmoCount > 0 && weapon.AmmoCount == 0 && !IsAmmoForWeapon( npc, weapon ) )
	{
		return false;
	}
	
    return true;
}

bool IsAmmoForWeapon( Critter& npc, Item& weapon )
{
    if( npc.CountItem( weapon.AmmoPid ) > 0 )
	{
        return true;
    }

	Item@[] ammo;
    for( uint i = 0, j = npc.GetItemsByType( ITEM_TYPE_AMMO, ammo ); i < j; i++ )
    {
        Item@ a = ammo[ i ];
        if( a.Proto.Ammo_Caliber == weapon.Proto.Weapon_Caliber )
		{
            return true;
		}
	}
	
    return false;
}

#endif // MAIN_PLANES