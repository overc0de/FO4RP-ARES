#ifndef VOMIT
#define VOMIT

#include "_utils.fos"
#include "vomit_h.fos"
#include "_ltp.fos"

import void hotkey_critter_anim( Critter& cr, int param0 ) from "general_unsafe";

bool vomit_ltp_inited = false;
void vomit_ltp_init()
{
	LTPREG( LTP_VOMIT, process_vomit )
	vomit_ltp_inited = true;
}

void unsafe_vomit( Critter& cr, int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	if( !valid( cr ) || cr.IsBusy() || cr.IsDead() )
	{
		return;
	}
	
	Map@ map = cr.GetMap();
	if( !valid(map) )
	{
		return;
	}	
	
	uint16 mapPid = map.GetProtoId();

	if( cr.ParamBase[ ST_THIRST ] <= VOMIT_THIRST / 2 || cr.ParamBase[ ST_HUNGER ] <= VOMIT_HUNGER / 2 )
	{		
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EMOTE_CANTVOMIT );	
		return;
	}

	if( cr.IsKnockout() || cr.Stat[ ST_CURRENT_HP ] <= 0 )
	{
		return;
	}
	
	if( !vomit_ltp_inited )
	{
		vomit_ltp_init();
	}

	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_TRY2VOMIT );
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = VOMIT_WAIT;
	cr.ParamBase[ ST_LTP_SEQUENCE ] = 1;
	StartProcess( cr, LTP_VOMIT, 0, 0, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
	cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
	return;
}

uint process_vomit( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_VOMIT )
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return 0;
	}
		
    if( param0 == 0 )
	{
		param0 ++;
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
	}
	else
    {	
		vomit_result( cr, map );
	}
	
	return 0;
}

void vomit_result( Critter& cr, Map& map )
{
	_CritAnimatePickup( cr );
	cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_VOMITS );
	PlayGenericSound( map, cr.HexX, cr.HexY, "puke.ogg", 10 );
	uint16 hx = cr.HexX, hy = cr.HexY;
	map.MoveHexByDir( hx, hy, cr.Dir, 1 );
	map.AddItem( hx, hy, PID_SHIT_SMALL, 1 );
	cr.ParamBase[ ST_HUNGER ] -= VOMIT_HUNGER;
	cr.ParamBase[ ST_THIRST ] -= VOMIT_THIRST;
	cr.ParamBase[ ST_DRUNK ] -= VOMIT_DRUNK;
	cr.ParamBase[ ST_POISONING_LEVEL ] -= VOMIT_POISON_LEVEL;
	if(	cr.Param[ ST_POISONING_LEVEL ] < 0 )
	{
		cr.ParamBase[ ST_POISONING_LEVEL ] = 0;
	}
}

uint cte_vomit( Critter& cr, int identifier, uint& rate )
{
	if( cr.IsDead() )
	{
		return 0; 
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return 0;	
	}
	
	vomit_result( cr, map );
	
	return 0; 
}

uint cte_vomit_warn( Critter& cr, int identifier, uint& rate )
{
	if( cr.IsDead() )
	{
		return 0; 
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return 0;	
	}
	
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ABOUT_TO_VOMIT );
	
	return 0; 
}

#endif //VOMIT